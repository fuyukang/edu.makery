<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[edu.makery.ch | Category: English]]></title>
  <link href="http://edu.makery.ch/blog/categories/english/atom.xml" rel="self"/>
  <link href="http://edu.makery.ch/blog/categories/english/"/>
  <updated>2014-03-28T23:53:32+01:00</updated>
  <id>http://edu.makery.ch/blog/categories/english</id>
  <author>
    <name><![CDATA[Marco Jakob]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving to code.makery.ch]]></title>
    <link href="http://edu.makery.ch/blog/2014/03/28/moving-to-code-makery-ch/"/>
    <updated>2014-03-28T00:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2014/03/28/moving-to-code-makery-ch</id>
    <content type="html"><![CDATA[<p>This blog is moving to a new home:</p>

<p><a href="http://code.makery.ch"><img src="http://edu.makery.ch/images/code-makery.png"></a></p>

<h3>Please update your links and RSS feeds to <a href="http://code.makery.ch">code.makery.ch</a></h3>

<h3>Or even better: Sign up to <a href="https://tinyletter.com/code-makery">receive updates by email</a></h3>

<h2>Why the Move?</h2>

<p>When I started blogging in 2012 I thought this would be a blog about educational things. That&#8217;s why I called it <strong>edu</strong>.makery.ch. The posts and tutorials I originally wrote for my students turned out to be useful for a much broader audience. (I&#8217;ve been getting some good traffic, averaging around 700 visits per day.) Soon the blog became a website not just about educational matters but about programming material in general.</p>

<p>So I decided to move to a new subdomain that expresses what the website is about: <code>code</code></p>

<h2>Redesign</h2>

<p>At the same time I made a <strong>complete redesign</strong> and separated the rather large tutorials from the blog (containing shorter posts).</p>

<h2>Expect More Tutorials</h2>

<p>I plan to update the <code>JavaFX 2</code> tutorials for <code>JavaFX 8</code> (which is quite some work if done well). And I hope to write more about <code>Dart</code> in the future, we&#8217;ll see.</p>

<h2>Stay in Touch</h2>

<p>I would love to get your feedback about the new design and the tutorials. If you would like me to inform you when new content is available, <a href="https://tinyletter.com/code-makery">sign up with your email here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming with Dart]]></title>
    <link href="http://edu.makery.ch/blog/2013/06/26/programming-with-dart/"/>
    <updated>2013-06-26T16:30:00+02:00</updated>
    <id>http://edu.makery.ch/blog/2013/06/26/programming-with-dart</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://edu.makery.ch/images/dart/dart-logo.png"></p>

<p>The last few months I have been programming with Google&#8217;s new <a href="http://www.dartlang.org/">Dart</a> language. I&#8217;m very excited about how great it is to work with Dart! Currently, I&#8217;m using Dart for the web client of a project called <a href="http://doxblox.ch">doxblox</a> (site is only in German at the moment).</p>

<p>After a while I found some things that I was missing and started to write a few Dart libraries:</p>

<ul>
<li>The first was a <a href="http://edu.makery.ch/projects/dart-event-bus/">Dart EventBus</a> for decoupling applications.</li>
<li>The second was <a href="http://edu.makery.ch/projects/dart-html5-drag-and-drop/">HTML5 Drag and Drop</a> support.</li>
</ul>


<p>HTML5 Drag and Drop was quite a task to get working across different browsers! Take a look and let me know what you think or if you have any issues with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Deployment on Mac OS]]></title>
    <link href="http://edu.makery.ch/blog/2013/02/11/javafx-deployment-on-mac-os/"/>
    <updated>2013-02-11T15:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/02/11/javafx-deployment-on-mac-os</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp07.png"></p>

<p>Eskil, one of my students, provided me with information about how to deploy the JavaFX AddressApp on Mac OS.</p>

<p>I&#8217;ve updated the <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7/">AddressApp Tutorial Part VII</a> with instructions about JavaFX deployment for Mac.</p>

<p>To see how the end result will look like you can download it as a Mac OS dmg drag-and-drop installer: <a href="https://www.dropbox.com/s/cfpr4bh25u8qsmz/AddressApp.dmg">AddressApp.dmg</a></p>

<p>Thank you Eskil for providing this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Scene Builder and e(fx)clipse Updates]]></title>
    <link href="http://edu.makery.ch/blog/2013/02/08/javafx-scene-builder-and-efxclipse-updates/"/>
    <updated>2013-02-08T21:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/02/08/javafx-scene-builder-and-efxclipse-updates</id>
    <content type="html"><![CDATA[<p>I&#8217;m excited about the quick reaction to bug reports by the JavaFX developers at Oracle! I&#8217;ve reported an (annoying) Scene Builder <a href="http://javafx-jira.kenai.com/browse/DTL-5402">bug</a> at the end of November and it was already fixed in a new Scene Builder version in January.</p>

<h2>Scene Builder Update</h2>

<p>The Scene Builder bug forced us to delete and then reselect the controller class every time we reopened a <code>fxml</code> file in Scene Builder. This is fixed in <code>Scene Builder 1.1 beta 17</code> and above. So <strong>I recommend you update to the newest version</strong>:</p>

<!-- more -->


<ul>
<li>Go to <a href="http://www.oracle.com/technetwork/java/javafx/tools/index.html">JavaFX Scene Builder Page</a> and download the newest <strong>JavaFX Scene Builder 1.1 Early Access</strong> edition.</li>
</ul>


<p>I&#8217;ve updated the AddressApp Tutorial <a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3/">Part III</a>, <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V</a> and <a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI</a> where I mentioned the bug.</p>

<h2>e(fx)clipse Update</h2>

<p>The (very helpful) JavaFX plugin for Eclipse has been updated to <a href="http://tomsondev.bestsolution.at/2013/01/06/efxclipse-0-8-0-released/">version 0.8.0</a>.</p>

<p>As Tom Schindl, the author of e(fx)clipse, mentioned in a <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7#comment-742775781">comment</a> to <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">AddressApp Tutorial Part VII</a>, we might not need to explicitly start Eclipse with a JDK to do the deployment (Step 1 in the tutorial).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Date Picker]]></title>
    <link href="http://edu.makery.ch/blog/2013/01/07/javafx-date-picker/"/>
    <updated>2013-01-07T15:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/01/07/javafx-date-picker</id>
    <content type="html"><![CDATA[<p>As JavaFX 2.2 doesn&#8217;t contain a Calendar control we would have to create our own to provide a convenient way to enter a date. Fortunately, <a href="http://myjavafx.blogspot.ch/2012/01/javafx-calendar-control.html">Christian Schudt</a> has created a very nice DatePicker that we can use:</p>

<p><img src="http://edu.makery.ch/images/javafx-date-picker/javafx-date-picker-01.png"></p>

<!-- more -->


<p>I modified <a href="http://myjavafx.blogspot.ch/2012/01/javafx-calendar-control.html">Christian Schudt&#8217;s</a> <code>DatePicker</code> class a little with a few additional lines at the end of the constructor. One change is to let the <code>DatePicker</code> grow horizontally with its parent and the other change passes the style sheet to the popup.</p>

<p>You can <strong>download</strong> a <code>jar</code> with my modified version and the stylesheet that goes with it:</p>

<ul>
<li><a href="http://edu.makery.ch/downloads/javafx-date-picker/schudt-javafx-datepicker-0.0.2.jar">schudt-javafx-datepicker-0.0.2.jar</a>

<ul>
<li>Version 0.0.2 contains a fix for the Japanese language (credits to mas0061)</li>
</ul>
</li>
<li><a href="http://edu.makery.ch/downloads/javafx-date-picker/DatePicker.css">DatePicker.css</a></li>
</ul>


<h2>Integrating the Date Picker with AddressApp</h2>

<p>I&#8217;ll show how you can use the <code>DatePicker</code> by integrating it with our <strong>AddressApp</strong> example. You can download the full AddressApp example from the <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">AddressApp Tutorial Part VII</a> (at the very end of the blog post).</p>

<h3>Add the Library and CSS</h3>

<p>Download and add the <code>schudt-javafx-datepicker-x-x-x.jar</code> file from above to the <code>lib</code> folder. Add it to the classpath with <em>right-click | Build Path | Add to Build Path</em>.</p>

<p>Add the <code>DatePicker.css</code> file to the <code>ch.makery.address.view</code> package.</p>

<h3>Prepare the View for the DatePicker</h3>

<p>In our <code>PersonEditDialog</code> we have a simple text field for the Date. This is not very convenient and we&#8217;d like to replace this with the new <code>DatePicker</code>.</p>

<p>First, delete the birthday text field from <code>PersonEditDialog.fxml</code> (using the SceneBuilder).</p>

<p>We won&#8217;t be able to add the custom <code>DatePicker</code> directly in SceneBuilder (at least not with the current SceneBuilder). We&#8217;ll need to add it manually in the Java code. Delete the <code>birthdayField</code> from the <code>PersonEditDialogController</code> and add the following fields instead:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">GridPane</span> <span class="n">gridPane</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">DatePicker</span> <span class="n">birthdayDatePicker</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, open the <code>PersonEditDialog.fxml</code> in SceneBuilder. Select the GridPane and choose <code>gridPane</code> as <code>fx:id</code>.</p>

<h3>Initialize the DatePicker</h3>

<p>Create the <code>DatePicker</code> in the <code>initialize()</code> method as follows:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Initialize the DatePicker for birthday</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatePicker</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">ENGLISH</span><span class="o">);</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">setDateFormat</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getCalendarView</span><span class="o">().</span><span class="na">todayButtonTextProperty</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;Today&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getCalendarView</span><span class="o">().</span><span class="na">setShowWeeks</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getStylesheets</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ch/makery/address/view/DatePicker.css&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add DatePicker to grid</span>
</span><span class='line'>  <span class="n">gridPane</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Some Further Adjustments</h3>

<p>Change in <code>setPerson(...)</code>:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPerson</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">person</span> <span class="o">=</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">firstNameField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">());</span>
</span><span class='line'>  <span class="n">lastNameField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getLastName</span><span class="o">());</span>
</span><span class='line'>  <span class="n">streetField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getStreet</span><span class="o">());</span>
</span><span class='line'>  <span class="n">postalCodeField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getPostalCode</span><span class="o">()));</span>
</span><span class='line'>  <span class="n">cityField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getCity</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">setSelectedDate</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">().</span><span class="na">getTime</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">setSelectedDate</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change in <code>handleOk()</code>:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleOk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">isInputValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setPostalCode</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">()));</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Calendar</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getSelectedDate</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setBirthday</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">okClicked</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change in <code>isInputValid()</code>:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isInputValid</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">errorMessage</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid first name!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid last name!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid street!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid postal code!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// try to parse the postal code into an int</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid postal code (must be an integer)!\n&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid city!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>  <span class="c1">// CHANGE STARTS HERE</span>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getSelectedDate</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid birthday!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">invalidProperty</span><span class="o">().</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid birthday. Use the format yyyy-mm-dd!\n&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>  <span class="c1">// CHANGE ENDS HERE</span>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">errorMessage</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Show the error message</span>
</span><span class='line'>    <span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">dialogStage</span><span class="o">,</span> <span class="n">errorMessage</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Please correct invalid fields&quot;</span><span class="o">,</span> <span class="s">&quot;Invalid Fields&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tweaking the DatePicker</h2>

<p>For further details about how to tweak the <code>DatePicker</code> see <a href="http://myjavafx.blogspot.ch/2012/01/javafx-calendar-control.html">JavaFX Calendar Control</a> on Christian Schudt&#8217;s Blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Snapshot as PNG Image]]></title>
    <link href="http://edu.makery.ch/blog/2013/01/04/javafx-snapshot-as-png-image/"/>
    <updated>2013-01-04T14:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/01/04/javafx-snapshot-as-png-image</id>
    <content type="html"><![CDATA[<p>JavaFX 2.2 and above provides a convenient <code>snapshot</code> feature. It takes a snapshot of any node or scene.</p>

<p>The following method saves the <code>barChart</code> node as a <code>png</code> image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveAsPng</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">WritableImage</span> <span class="n">image</span> <span class="o">=</span> <span class="n">barChart</span><span class="o">.</span><span class="na">snapshot</span><span class="o">(</span><span class="k">new</span> <span class="n">SnapshotParameters</span><span class="o">(),</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// TODO: probably use a file chooser here</span>
</span><span class='line'>  <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;chart.png&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ImageIO</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">SwingFXUtils</span><span class="o">.</span><span class="na">fromFXImage</span><span class="o">(</span><span class="n">image</span><span class="o">,</span> <span class="kc">null</span><span class="o">),</span> <span class="s">&quot;png&quot;</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO: handle exception here</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: You could test this code with our <strong>AddressApp</strong> example (see download at the end of <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">AddressApp Tutorial Part VII</a>). Just add the <code>saveAsPng()</code> method to the <code>BirthdayStatisticsController</code> class and call the method through some action (e.g. a new button).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Event Handlers and Change Listeners]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/19/javafx-event-handlers-and-change-listeners/"/>
    <updated>2012-12-19T19:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/19/javafx-event-handlers-and-change-listeners</id>
    <content type="html"><![CDATA[<p>Very often in JavaFX we have to react to user events: The user clicks a button, presses a key, moves the mouse, etc. This post describes how to handle such events.</p>

<p>We&#8217;ll try to do as much event handling with <em>Scene Builder</em> and <code>fxml</code> as possible. For some events we&#8217;ll add event handling in the Java code of the controller.</p>

<p>Our example covers some of the most used events on common JavaFX 2 controls:</p>

<p><img src="http://edu.makery.ch/images/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners-01.png"></p>

<!-- more -->


<p>Note: For background information refer to the official <a href="http://docs.oracle.com/javafx/2/events/jfxpub-events.htm">JavaFX Events Tutorial</a> (does not cover <code>fxml</code>).</p>

<h2>Set Up</h2>

<p>Set up a simple JavaFX project with an <strong>fxml</strong> file, a corresponding <strong>controller</strong> class and a main class to load the fxml. Alternatively, just download the source at the end of this post.</p>

<h2>Button Events</h2>

<p>Handling <code>Button</code> events is very easy. Altough there are other events we&#8217;ll likely only need <code>ActionEvent</code>s.</p>

<p>First, open the <strong>controller</strong> class. Add a new method to handle button action events:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleButtonAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;Button Action\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: The <code>outputTextArea</code> is just a JavaFX <code>TextArea</code> to print some output. You could also do a <code>System.out.println(...)</code>.</p>

<p>Now, open the <strong>fxml</strong> file in <em>Scene Builder</em>, select a button and choose <code>#handleButtonAction</code> as <em>On Action</em>.</p>

<p><img src="http://edu.makery.ch/images/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners-02.png"></p>

<p>This should already be enough for the button to work. If we need more information about the event that called our method in the controller, we could add a parameter like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleButtonAction</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CheckBox Events</h2>

<p>Handling <code>CheckBox</code> events works almost the same as handling <code>Button</code> events. The only difference is that we might need to know the current state of the <code>CheckBox</code>, wheter it is selected or not.</p>

<p>For such information we must have a reference to the <code>CheckBox</code>. So, we&#8217;ll add an instance variable at the beginning of our <strong>controller</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">CheckBox</span> <span class="n">checkBox</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Open <em>Scene Builder</em>, choose the <code>checkBox</code> variable as <code>fx:id</code> for the <code>CheckBox</code>.</p>

<p><img src="http://edu.makery.ch/images/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners-03.png"></p>

<p>Now create a handler method and choose it as <em>On Action</em> in <em>Scene Builder</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleCheckBoxAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;CheckBox Action (selected: &quot;</span> <span class="o">+</span> <span class="n">checkBox</span><span class="o">.</span><span class="na">isSelected</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ComboBox Events</h2>

<p>For the <code>ComboBox</code> (and later for the <code>ListView</code>) we&#8217;ll use a simple model class called <code>Person</code> with a <code>firstName</code> and <code>lastName</code> attribute:</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s start with the <code>ComboBox</code> stuff:</p>

<p>First, create an instance variable for the <code>ComboBox</code> and an <code>ObservableList</code> in our <strong>controller</strong> class. Select the <code>comboBox</code> variable as <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ComboBox</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">comboBox</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">comboBoxData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, add some data (e.g. in the constructor or initialize method):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Hans&quot;</span><span class="o">,</span> <span class="s">&quot;Muster&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Ruth&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Heinz&quot;</span><span class="o">,</span> <span class="s">&quot;Kurz&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Cornelia&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Werner&quot;</span><span class="o">,</span> <span class="s">&quot;Meyer&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third, set the data into the list. This must be in the <code>initialize()</code> method as this is the time when we can be shure that the variable <code>comboBox</code> is initialized with the <code>ComboBox</code> from the <code>fxml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">comboBox</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">comboBoxData</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Fourth, create a handler method and select the method as <em>On Action</em> in <em>Scene Builder</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleComboBoxAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">selectedPerson</span> <span class="o">=</span> <span class="n">comboBox</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">getSelectedItem</span><span class="o">();</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;ComboBox Action (selected: &quot;</span> <span class="o">+</span> <span class="n">selectedPerson</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hyperlink Events</h2>

<p><code>Hyperlink</code>s can be used the same way as a <code>Button</code> (see above).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleHyperlinkAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;Hyperlink Action\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Slider Events</h2>

<p><code>Slider</code>s don&#8217;t have <code>ActionEvent</code>s. Instead they have a <code>Number</code> called <code>valueProperty</code> that contains the current value of the slider.</p>

<h3>Change Listener</h3>

<p>In JavaFX a <code>Property</code> is more than just a simple value. Each <code>Property</code> provides methods to observe changes made to its value. We can <strong>&#8220;listen for changes&#8221;</strong>.</p>

<p>So, create an instance variable and select it <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Slider</span> <span class="n">slider</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>initialize()</code> method add a <code>ChangeListener</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="c1">// Listen for Slider value changes</span>
</span><span class='line'><span class="n">slider</span><span class="o">.</span><span class="na">valueProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Number</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">Number</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;Slider Value Changed (newValue: &quot;</span> <span class="o">+</span> <span class="n">newValue</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This construct looks a bit coplicated. Fortunately, it&#8217;s always the same pattern for every <code>ChangeListener</code>. Let me explain:</p>

<ol>
<li><code>slider.valueProperty()</code> gives us access to the <code>Property</code>. <br/>
<strong>Note:</strong> There are many other <code>Properties</code> like <code>focusedProperty() or</code>disabledProperty()<code>. We could use any of those properties and add a</code>ChangeListener` to it.</li>
<li><code>addListener(...)</code> expects a <code>ChangeListener</code> of type <code>Number</code>. <code>ChangeListener</code> is an interface so we need to create a concrete class that <code>implements ChangeListener</code>:

<ul>
<li>Normally, we would create a new class implementing the <code>ChangeListener</code> interface like this: <code>public class MyChangeListener implements ChangeListener&lt;Number&gt; {...}</code>. Then, we&#8217;d create an instance of this class and pass it to <code>addListener(...)</code>.</li>
<li>Since we will <em>use this class only once</em>, it&#8217;s a bit overkill to create a normal class. Instead we can use a short form of creating a class and instantiating it. This is called an <strong>Anonymous Inner Class</strong> as it does not have a name.</li>
</ul>
</li>
<li><code>new ChangeListener&lt;Number&gt;() {...}</code> creates such an <em>Anonymous Inner Class</em> of type <code>&lt;Number&gt;</code>.</li>
<li>Every <code>ChangeListener</code> must have a method called <code>changed(...)</code> that will be called every time a change occurs.</li>
</ol>


<h2>TextBox Events</h2>

<p>In a <code>TextBox</code> the <code>ActionEvent</code> is triggered with the return key. We might use this, but probably the most common case is that we must react to changes made to the text.</p>

<p>First, we&#8217;ll create an instance variable and select it as <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">TextField</span> <span class="n">textField</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how we can react to changes of the text. We&#8217;ll use a <code>ChangeListener</code> as described above (see Slider section):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="c1">// Listen for TextField text changes</span>
</span><span class='line'><span class="n">textField</span><span class="o">.</span><span class="na">textProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">String</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;TextField Text Changed (newValue: &quot;</span> <span class="o">+</span> <span class="n">newValue</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ListView Events</h2>

<p>We&#8217;ll use the same <code>Person</code> class as we used for the <code>ComboBox</code> above.</p>

<p>First, create an instance variable for the <code>ListView</code> and an <code>ObservableList</code> in our <strong>controller</strong> class. Select the <code>listView</code> variable as <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ListView</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">listView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">listViewData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, add some data (e.g. in the constructor or initialize method):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Lydia&quot;</span><span class="o">,</span> <span class="s">&quot;Kunz&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;Best&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Martin&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third, set the data into the list. This must be in the <code>initialize()</code> method as this is the time when we can be shure that the variable <code>listView</code> is initialized with the <code>ListView</code> from the <code>fxml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">listViewData</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Fourth, also in the <code>initialize()</code> method, we&#8217;ll add a <code>ChangeListener</code>. It is the same ChangeListener pattern as described above (see Slider section):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">selectedItemProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Person</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Person</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">Person</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;ListView Selection Changed (newValue: &quot;</span> <span class="o">+</span> <span class="n">newValue</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download Example Source</h2>

<p>Download the complete <a href="http://edu.makery.ch/downloads/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners.zip">event-handlers example source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX TableView Cell Renderer]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/19/javafx-tableview-cell-renderer/"/>
    <updated>2012-12-19T03:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/19/javafx-tableview-cell-renderer</id>
    <content type="html"><![CDATA[<p>In this post I will show how to customize the rendering of a JavaFX 2 TableView. The <em>Birthday</em> column in the screenshot below is a formatted <code>Calendar</code> object. Depending on the year, the text color is changed.</p>

<p><img src="http://edu.makery.ch/images/javafx-tableview-cell-renderer/javafx-tableview-cell-renderer-01.png"></p>

<!-- more -->


<h2>How a Table Cell is Rendered</h2>

<p>Each table cell will receive an object, in our case it is an instance of <code>Person</code>. To do the rendering, the cell will need a <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/TableColumn.html#setCellValueFactory(javafx.util.Callback"><code>Cell Value Factory</code></a>) and a <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/TableColumn.html#setCellFactory(javafx.util.Callback"><code>Cell Factory</code></a>):</p>

<h3>Cell Value Factory</h3>

<p>The cell must know which part of <code>Person</code> it needs to display. For all cells in the <em>birthday column</em> this will be the <code>Person</code>s <code>birthday</code> value.</p>

<p>This is our birthday column:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;</span> <span class="n">birthdayColumn</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And later during initialization, we&#8217;ll set the <code>Cell Value Factory</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">birthdayColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;(</span><span class="s">&quot;birthday&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far nothing too fancy.</p>

<h3>Cell Factory</h3>

<p>Once the cell has the value, it must know how to display that value. In our case, the birthday&#8217;s <code>Calendar</code> value must be formatted and colored depending on the year.</p>

<p><em>[update 2012-12-27: Set text to null if cell is empty. See <a href="http://edu.makery.ch/blog/2012/12/19/javafx-tableview-cell-renderer/#comment-746539504">comment</a> by James_D below]</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">birthdayColumn</span><span class="o">.</span><span class="na">setCellFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;,</span> <span class="n">TableCell</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">TableCell</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">(</span><span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">TableCell</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">updateItem</span><span class="o">(</span><span class="n">Calendar</span> <span class="n">item</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">empty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">super</span><span class="o">.</span><span class="na">updateItem</span><span class="o">(</span><span class="n">item</span><span class="o">,</span> <span class="n">empty</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="o">(!</span><span class="n">empty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Use a SimpleDateFormat or similar in the format method</span>
</span><span class='line'>                <span class="n">setText</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="n">item</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">YEAR</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">setTextFill</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">CHOCOLATE</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">setTextFill</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setText</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Cell Factory</code> contains some complicated stuff (<em>Callback</em>, <em>Generics</em> and <em>Anonymous Inner Classes</em>). Don&#8217;t worry too much about all this. Just focus on the important part which is the <code>updateItem(...)</code> method.</p>

<p>This <code>updateItem(...)</code> method gets called whenever the cell should be rendered. We receive the <code>Calendar</code> item that must be rendered. If empty is <code>true</code> we don&#8217;t do anything. Otherwise we format the item and set the text of the cell. Depending on the year, we also set the text color.</p>

<h2>ListView and TreeView</h2>

<p>Note that the JavaFX 2 <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/ListView.html"><code>ListView</code></a> and <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/TreeView.html"><code>TreeView</code></a> are rendered in a very similar way.</p>

<h2>Download</h2>

<p>Download the complete <a href="http://edu.makery.ch/downloads/javafx-tableview-cell-renderer/javafx-tableview-cell-renderer.zip">tableview-cell-renderer example</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX TableView Filter]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/18/javafx-tableview-filter/"/>
    <updated>2012-12-18T23:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/18/javafx-tableview-filter</id>
    <content type="html"><![CDATA[<p>The JavaFX 2 TableView lacks the ability for filtering. The intention before JavaFX 2.0 shipped was to include a <code>FilteredList</code> that would wrap an <code>ObservableList</code> (see Oracle forum <a href="https://forums.oracle.com/forums/thread.jspa?threadID=2350647">Filter rows on TableView</a>). Unfortunately, the filtering was removed again. It will appear in JavaFX 8 which won&#8217;t be released before late 2013.</p>

<p>In this post I will explain how we can manually do row filtering in JavaFX 2.</p>

<!-- more -->


<h2>Example Set Up</h2>

<p>As an example we&#8217;ll create a simple table that displays <code>Person</code>s. The table should be filtered whenever the user enters something in the text field.</p>

<p><img src="http://edu.makery.ch/images/javafx-tableview-filter/tableview-filter-01.png"></p>

<p>I prefer to define the user interface in <code>fxml</code> (with Scene Builder). The <code>fxml</code> looks like this:</p>

<figure class='code'><figcaption><span> (PersonTable.fxml)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/PersonTable.fxml'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?import java.lang.*?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import javafx.scene.control.*?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import javafx.scene.layout.*?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import javafx.scene.layout.AnchorPane?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import jfxtras.labs.scene.control.*?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;AnchorPane</span> <span class="na">minWidth=</span><span class="s">&quot;315.0&quot;</span> <span class="na">prefHeight=</span><span class="s">&quot;300.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;315.0&quot;</span> <span class="na">xmlns:fx=</span><span class="s">&quot;http://javafx.com/fxml&quot;</span> <span class="na">fx:controller=</span><span class="s">&quot;PersonTableController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;children&gt;</span>
</span><span class='line'>    <span class="nt">&lt;TableView</span> <span class="na">fx:id=</span><span class="s">&quot;personTable&quot;</span> <span class="na">prefHeight=</span><span class="s">&quot;-1.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;-1.0&quot;</span> <span class="na">tableMenuButtonVisible=</span><span class="s">&quot;false&quot;</span> <span class="na">AnchorPane.bottomAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.leftAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.rightAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.topAnchor=</span><span class="s">&quot;40.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;columns&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TableColumn</span> <span class="na">maxWidth=</span><span class="s">&quot;5000.0&quot;</span> <span class="na">minWidth=</span><span class="s">&quot;10.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;120.0&quot;</span> <span class="na">text=</span><span class="s">&quot;First Name&quot;</span> <span class="na">fx:id=</span><span class="s">&quot;firstNameColumn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TableColumn</span> <span class="na">maxWidth=</span><span class="s">&quot;5000.0&quot;</span> <span class="na">minWidth=</span><span class="s">&quot;10.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;120.0&quot;</span> <span class="na">text=</span><span class="s">&quot;Last Name&quot;</span> <span class="na">fx:id=</span><span class="s">&quot;lastNameColumn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/columns&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/TableView&gt;</span>
</span><span class='line'>    <span class="nt">&lt;HBox</span> <span class="na">id=</span><span class="s">&quot;HBox&quot;</span> <span class="na">alignment=</span><span class="s">&quot;CENTER&quot;</span> <span class="na">spacing=</span><span class="s">&quot;5.0&quot;</span> <span class="na">AnchorPane.leftAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.rightAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.topAnchor=</span><span class="s">&quot;10.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;children&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Label</span> <span class="na">text=</span><span class="s">&quot;Filter Table:&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextField</span> <span class="na">fx:id=</span><span class="s">&quot;filterField&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;-1.0&quot;</span> <span class="na">HBox.hgrow=</span><span class="s">&quot;ALWAYS&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/children&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/HBox&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/children&gt;</span>
</span><span class='line'><span class="nt">&lt;/AnchorPane&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll need a class <code>Person</code> for the model:</p>

<figure class='code'><figcaption><span> (Person.java)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/Person.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll need a <code>MainApp</code> to load everything:</p>

<figure class='code'><figcaption><span> (MainApp.java)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/MainApp.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXMLLoader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.Scene</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.layout.AnchorPane</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainApp</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;Table Filtering&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;PersonTable.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>          <span class="n">AnchorPane</span> <span class="n">page</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnchorPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>          <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>          <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error loading PersonTable.fxml!&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most interesting part is the <code>PersonTableController</code> which I&#8217;ll discuss a bit more now.</p>

<h2>Filtering</h2>

<p>For the filtering to work, we need <strong>two</strong> <code>ObservableList</code>s. One list contains the original <strong>master data</strong> while the other contains the <strong>filtered data</strong> that will be displayed in the table.</p>

<p>The constructor puts the same sample data in both the <code>masterData</code> and <code>filteredData</code> lists. In the beginning nothing is filtered and the two lists contain the same data.</p>

<p>We&#8217;ll also add a <code>ListChangeListener</code> to the <code>masterData</code>. Whenever something changes in <code>masterData</code> we&#8217;ll also have to update the <code>filteredData</code>.</p>

<p>Now let&#8217;s take a look at the code:</p>

<figure class='code'><figcaption><span> (PersonTableController.java)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/PersonTableController.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.beans.value.ChangeListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.beans.value.ObservableValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.FXCollections</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.ListChangeListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.ObservableList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TableColumn</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TableView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TextField</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.cell.PropertyValueFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonTableController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">filterField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableView</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personTable</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">firstNameColumn</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lastNameColumn</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">masterData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">filteredData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The constructor. The constructor is called before the initialize()</span>
</span><span class='line'><span class="cm">  * method.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">PersonTableController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Add some sample data to the master data</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Hans&quot;</span><span class="o">,</span> <span class="s">&quot;Muster&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Ruth&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Heinz&quot;</span><span class="o">,</span> <span class="s">&quot;Kurz&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Cornelia&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Werner&quot;</span><span class="o">,</span> <span class="s">&quot;Meyer&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Lydia&quot;</span><span class="o">,</span> <span class="s">&quot;Kunz&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;Best&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Martin&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Initially add all data to filtered data</span>
</span><span class='line'>      <span class="n">filteredData</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">masterData</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Listen for changes in master data.</span>
</span><span class='line'>      <span class="c1">// Whenever the master data changes we must also update the filtered data.</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ListChangeListener</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onChanged</span><span class="o">(</span><span class="n">ListChangeListener</span><span class="o">.</span><span class="na">Change</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Person</span><span class="o">&gt;</span> <span class="n">change</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">updateFilteredData</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Initializes the controller class. This method is automatically called</span>
</span><span class='line'><span class="cm">  * after the fxml file has been loaded.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Initialize the person table</span>
</span><span class='line'>      <span class="n">firstNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;firstName&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">lastNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;lastName&quot;</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Add filtered data to the table</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">filteredData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Listen for text changes in the filter text field</span>
</span><span class='line'>      <span class="n">filterField</span><span class="o">.</span><span class="na">textProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">String</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">updateFilteredData</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Updates the filteredData to contain all data from the masterData that</span>
</span><span class='line'><span class="cm">  * matches the current filter.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateFilteredData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">filteredData</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">p</span> <span class="o">:</span> <span class="n">masterData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">matchesFilter</span><span class="o">(</span><span class="n">p</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">filteredData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Must re-sort table after items changed</span>
</span><span class='line'>      <span class="n">reapplyTableSortOrder</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Returns true if the person matches the current filter. Lower/Upper case</span>
</span><span class='line'><span class="cm">  * is ignored.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param person</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">matchesFilter</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">filterString</span> <span class="o">=</span> <span class="n">filterField</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">filterString</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">filterString</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// No filter --&gt; Add all.</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">lowerCaseFilterString</span> <span class="o">=</span> <span class="n">filterString</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">indexOf</span><span class="o">(</span><span class="n">lowerCaseFilterString</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getLastName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">indexOf</span><span class="o">(</span><span class="n">lowerCaseFilterString</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Does not match</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">reapplyTableSortOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="o">?&gt;&gt;</span> <span class="n">sortOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">personTable</span><span class="o">.</span><span class="na">getSortOrder</span><span class="o">());</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">getSortOrder</span><span class="o">().</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">getSortOrder</span><span class="o">().</span><span class="na">addAll</span><span class="o">(</span><span class="n">sortOrder</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reacting to User Entering a Filter String</h3>

<p>At the end of the method <code>initialize()</code> we add a <code>ChangeListener</code> to the text property of the <code>TextField</code>. Whenever the user changes the text, the <code>updateFilteredData()</code> method is called.</p>

<p>In <code>updateFilteredData()</code> we remove all items in <code>filteredData</code> and only add the data matching the current filter.</p>

<h3>Changing Filter Behaviour</h3>

<p>The method <code>matchesFilter(...)</code> determines which <code>Person</code>s will be displayed. I chose to look both in the <code>firstName</code> and <code>lastName</code> fields for a match of the String while ignoring the case.</p>

<p>You could a different kind of filter behaviour in this method like Regular Expressions.</p>

<h3>Reapply Table Sort Order</h3>

<p>Whenever we change the filtering, the table must be resorted. The method <code>reapplyTableSortOrder()</code> is responsible to remove and set the sort order again.</p>

<h2>Conclusion</h2>

<p>Event though this might not be the fastest and most generic filtering approach, it&#8217;s still sufficient for many cases. For a more comfortable filtering we&#8217;ll have to wait for JDK 8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Java and JavaFX Learn Pages]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/18/new-java-and-javafx-learn-pages/"/>
    <updated>2012-12-18T15:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/18/new-java-and-javafx-learn-pages</id>
    <content type="html"><![CDATA[<p>I created two new pages to structure content on this website. The pages will guide you through the learning resources about Java and JavaFX:</p>

<ul>
<li><a href="http://edu.makery.ch/projects/learn-java">Learn Java</a> - Java resources and blog posts</li>
<li><a href="http://edu.makery.ch/projects/learn-javafx">Learn JavaFX</a> - JavaFX resources and blog posts</li>
</ul>

]]></content>
  </entry>
  
</feed>
