<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[edu.makery.ch | Category: Java]]></title>
  <link href="http://edu.makery.ch/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://edu.makery.ch/blog/categories/java/"/>
  <updated>2013-06-06T11:47:10+02:00</updated>
  <id>http://edu.makery.ch/blog/categories/java</id>
  <author>
    <name><![CDATA[Marco Jakob]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New Java and JavaFX Learn Pages]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/18/new-java-and-javafx-learn-pages/"/>
    <updated>2012-12-18T15:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/18/new-java-and-javafx-learn-pages</id>
    <content type="html"><![CDATA[<p>I created two new pages to structure content on this website. The pages will guide you through the learning resources about Java and JavaFX:</p>

<ul>
<li><a href="http://edu.makery.ch/projects/learn-programming">Learn Programming</a> - Java resources and blog posts</li>
<li><a href="http://edu.makery.ch/projects/learn-javafx">Learn JavaFX</a> - JavaFX resources and blog posts</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating PDFs in Java]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/13/creating-pdfs-in-java/"/>
    <updated>2012-12-13T23:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/13/creating-pdfs-in-java</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/helpful-java-libraries/pdf.png"></p>

<p>A good library to create PDFs is <a href="http://itextpdf.com/">iText</a>. It is a very powerful library but can also be used for very basic PDF file creation.</p>

<ul>
<li><a href="http://sourceforge.net/projects/itext/">iText download</a></li>
</ul>


<p>There are many iText tutorials, here are just a couple:</p>

<ul>
<li><a href="http://www.vogella.com/articles/JavaPDF/article.html">iText Tutorial</a></li>
<li>Tutorials and <a href="http://www.roseindia.net/java/itext/index.shtml">many iText Examples</a>
Almost every application will need some way to persistently store data. There are many different ways to accomplish that. We&#8217;ll start with a simple way to save a small amount of data and continue to more advanced techniques.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting Data in Java]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/13/persisting-data-in-java/"/>
    <updated>2012-12-13T23:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/13/persisting-data-in-java</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/helpful-java-libraries/floppy.png"></p>

<p>Almost every application will need some way to persistently store data. There are many different ways to accomplish that. We&#8217;ll start with a simple way to save a small amount of data and continue to more advanced techniques.</p>

<!-- more -->


<p>Some of the techniques (Preferences, XML and reading/writing Files) described here were already used in the <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX Tutorial Part 5</a>.</p>

<h2>Preferences</h2>

<p>With the class <a href="http://docs.oracle.com/javase/7/docs/api/index.html?java/util/prefs/Preferences.html"><code>Preferences</code></a> of the standard Java library we can save some small values. Typically, you&#8217;d save some simple user preferences in it like path to the <em>last opened file</em>.</p>

<p>Depending on the operating system, the <code>Preferences</code> are saved in different places (e.g. the registry file in Windows).</p>

<ul>
<li><code>Preferences</code> example in <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX AddressApp Tutorial Part 5</a>.</li>
<li>Instructions in <em>German</em> in the book <a href="http://openbook.galileocomputing.de/javainsel/javainsel_11_009.html#dodtp29221705-11a7-4fe0-8f23-bfb46d58ff59">Java ist auch eine Insel</a></li>
</ul>


<h2>Saving Files</h2>

<p>There are various possibilities to load and save a file in Java.</p>

<ul>
<li>An example is the <code>FileUtil</code> helper class in <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX AddressApp Tutorial Part 5</a>.</li>
<li>The official Java <a href="http://docs.oracle.com/javase/tutorial/essential/io/fileio.html">File I/O Tutorial</a>.</li>
</ul>


<p>Simple text files can directly be saved to the disk. You construct a String (from objects) and save it using the means described above. But if you later want to read from the text files and use the information in your application, you might have some difficulties. You would have to manually parse the elements from one big unstructured String. Then, to get objects again, you would have to create new objects and fill them with the information from the String.</p>

<p>That&#8217;s why it helps to save data in some structured form like XML.</p>

<h2>XML with XStream</h2>

<p>XStream is a simple library to serialize objects to XML and back again. Serializing means that, given an object (which may contain a reference to other objects), XStream will create a single XML-String representing this object(s). The XML-String can then be saved to a file. XStream will later accept this XML-String to reproduce the object(s) again.</p>

<ul>
<li>XML example in <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX AddressApp Tutorial Part 5</a>.</li>
<li>Official <a href="http://xstream.codehaus.org/">XStream Website</a> with a good <a href="http://xstream.codehaus.org/tutorial.html">Two Minute Tutorial</a>.</li>
</ul>


<p>When data gets more complex then a database instead of XML is appropriate.</p>

<h2>Java Database (also called Derby)</h2>

<p>Derby is an Open Source Database completely written in Java. The advantage of a pure Java database is that it can be embedded with the Java program (as opposed to being run as a separate, standalone server). Derby is based on the SQL Standard.</p>

<ul>
<li>Official <a href="http://db.apache.org/derby/">Apache Derby Website</a> containing downloads, manuals, etc.</li>
<li><a href="http://db.apache.org/derby/papers/DerbyTut/embedded_intro.html">Derby Tutorial</a> with an embedded example. <strong>Note:</strong> You will find the example <code>SimpleApp</code> inside the Derby zip under <code>demo/programs/simple/</code>.</li>
</ul>


<h3>Eclipse Data Tools Platform</h3>

<p>With the Eclipse <em>Data Tools Platform</em> plugin you can manage your database. This is very practical, especially to view the data that has been saved to the database.</p>

<ul>
<li><a href="http://www.vogella.de/articles/EclipseDataToolsPlatform/article.html">Eclipse Data Tools Platform Tutorial</a></li>
</ul>


<h2>Database with a Mapper Tool and MySQL (Advanced)</h2>

<p>Tools like <a href="http://www.hibernate.org/">Hibernate</a> and <a href="http://www.eclipse.org/eclipselink/">EclipseLink</a> help to fill the gap between the relational data in the database and objects (see <a href="http://de.wikipedia.org/wiki/Object-relational_impedance_mismatch">Object-relational impedance mismatch</a>).</p>

<ul>
<li><a href="http://www.javatips.net/blog/2011/12/hibernate-annotations-tutorial">Hibernate Tutorial</a></li>
<li>Other <a href="http://www.roseindia.net/hibernate/hibernate4/index.shtml">Hibernate Tutorials</a> with more information.</li>
<li>An extensive <a href="http://www.youtube.com/watch?v=Yv2xctJxE-w&amp;list=PL4AFF701184976B25&amp;index=1">Hibernate video tutorial series</a></li>
<li><a href="http://www.vogella.com/articles/JavaPersistenceAPI/article.html">EclipseLink Tutorial</a> - also using Derby Embedded Database (could be replaced by MySQL)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GameGridKara 2.0 Released]]></title>
    <link href="http://edu.makery.ch/blog/2012/10/03/gamegridkara-2-0-released/"/>
    <updated>2012-10-03T13:00:00+02:00</updated>
    <id>http://edu.makery.ch/blog/2012/10/03/gamegridkara-2-0-released</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/kara/gamegridkara-logo-large.png" title="GameGridKara" ></p>

<p>GameGridKara version 2.0 has been released (see a <a href="http://www.swisseduc.ch/informatik/karatojava/gamegridkara/changes.html">change log</a>).</p>

<h2>Features</h2>

<ul>
<li>Complete beginners course in German and English</li>
<li>Combination of Kara and <a href="http://www.gamegrid.ch">GameGrid</a> for a simple introduction to Java programming</li>
<li>Use <strong>any programming IDE like Eclipse, Netbeans or BlueJ</strong></li>
<li>16-20 lessons</li>
<li>12 handouts for students</li>
<li>24 Kara scenarios</li>
<li>38+ exercises with solutions</li>
<li>Programming of a Sokoban game with self-designed levels, a highscore, etc.</li>
</ul>


<h2>Sample Scenario</h2>

<p>That&#8217;s how a simple scenario of GameGridKara looks like in Eclipse. You will find the complete exercise on the handout for chapter 1 (see downloads).</p>

<p><img src="http://edu.makery.ch/images/kara/gamegridkara-eclipse.png" title="GameGridKara in Eclipse" ></p>

<p>What does the program in the screenshot do? It will get Kara around the first tree. The complete program can be written inside the <code>act()</code> method. For more complex scenarios you will likely have to create additional methods.</p>

<!-- more -->


<p>Kara&#8217;s world in the scenario above is loaded from the WorldSetup.txt file:</p>

<figure class='code'><figcaption><span>WorldSetup.txt</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='text'><span class='line'>World: Kara 07 Around Tree
</span><span class='line'>X: 10
</span><span class='line'>Y: 2
</span><span class='line'>
</span><span class='line'>@ # #  #.
</span></code></pre></td></tr></table></div></figure>


<p><code>X</code> and <code>Y</code> attributes define the width and height of the world. <code>@</code> represents the location of Kara while <code>#</code> stands for a tree and <code>.</code> for a leaf. The size of the world and the actor positions can easily be changed by editing the <em>WorldSetup.txt</em> file. You can also design new world setups by placing actors inside the world with the mouse and using the context menu | <code>saveWorldSetupToFile()</code> to save it to a file.</p>

<h2>How to Get Started</h2>

<p>To use the predefined scenarios you can import the scenarios into your development environment (see downloads below).</p>

<h3>Create Your Own Scenarios</h3>

<p>To create your own scenarios you will need to put the following two libraries on the classpath:</p>

<ul>
<li>GameGridKara-2.2.0.jar</li>
<li>JGameGrid-2.20.jar</li>
</ul>


<p>You can extract the two libraries from any scenario (see downloads below).</p>

<p>Each scenario must have <em>one Java class</em> and a <em>WorldSetup.txt</em> file as seen above. Here is a complete example of a Java class where the actual program will be written:</p>

<figure class='code'><figcaption><span>MyKara.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">kara.gamegrid.Kara</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kara.gamegrid.KaraWorld</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MyKara is a subclass of Kara. Therefore, it inherits all methods of Kara: &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * &lt;i&gt;MyKara ist eine Unterklasse von Kara. Sie erbt damit alle Methoden der Klasse Kara:&lt;/i&gt; &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Actions:     move(), turnLeft(), turnRight(), putLeaf(), removeLeaf() &lt;b&gt;</span>
</span><span class='line'><span class="cm"> * Sensors:     onLeaf(), treeFront(), treeLeft(), treeRight(), mushroomFront()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyKara</span> <span class="kd">extends</span> <span class="n">Kara</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * In the &#39;act()&#39; method you can write your program for Kara &lt;br&gt;</span>
</span><span class='line'><span class="cm">   * &lt;i&gt;In der Methode &#39;act()&#39; koennen die Befehle fuer Kara programmiert werden&lt;/i&gt;</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">act</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      <span class="n">turnRight</span><span class="o">();</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The main-method is the start of the program where the Kara world is loaded &lt;br&gt;</span>
</span><span class='line'><span class="cm">  * &lt;i&gt;Die main-Methode ist der Start des Programms, wo die Kara Welt geladen wird&lt;/i&gt;</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">KaraWorld</span> <span class="n">world</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KaraWorld</span><span class="o">(</span><span class="s">&quot;WorldSetup.txt&quot;</span><span class="o">,</span> <span class="n">MyKara</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">world</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>main(...)</code> method is needed to setup and start the world. You need to tell GameGridKara the name of the world setup file and provide the class in which to look for the <code>act()</code> method.</p>

<h2>GameGridKara Downloads</h2>

<p>Instructions, handouts, and scenarios can be downloaded from the Swisseduc website: <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/gamegridkara/gamegridkara-english.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GameGridKara on Swisseduc (English)'" > GameGridKara Downloads (English)</a> <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/gamegridkara/index.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GameGridKara on Swisseduc (German)'" > GameGridKara Downloads (German)</a></p>

<p>The GameGridKara source can be found on GitHub (feedback and bug reports are welcome!): <br/>
<a href="https://github.com/marcojakob/gamegrid-kara"><img class="nobox middle" src="http://edu.makery.ch/images/glyphicons_github.png" title="'GameGridKara on GitHub'" > GameGridKara Source on GitHub</a></p>

<h2>Feedback</h2>

<p>I would appreciate any feedback of your experience with GameGridKara. You can write an <a href="http://edu.makery.ch/about">E-Mail</a> or leave a comment at the bottom of this blog entry. If you create your own exercises and scenarios I would be glad to post or link them on this blog so others could use them too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GreenfootKara 2.0 Released]]></title>
    <link href="http://edu.makery.ch/blog/2012/10/03/greenfootkara-2-0-released/"/>
    <updated>2012-10-03T12:00:00+02:00</updated>
    <id>http://edu.makery.ch/blog/2012/10/03/greenfootkara-2-0-released</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/kara/greenfootkara-logo-large.png" title="'GreenfootKara'" ></p>

<p>GreenfootKara version 2.0 has been released (see a <a href="http://www.swisseduc.ch/informatik/karatojava/greenfootkara/changes.html">change log</a>).</p>

<h2>Features</h2>

<ul>
<li>Complete beginners course in German and English</li>
<li>Combination of Kara and <a href="http://greenfoot.org">Greenfoot</a> for a simple introduction to Java programming</li>
<li><strong>Uses Greenfoot as a simple programming IDE</strong></li>
<li>16-20 lessons</li>
<li>12 handouts for students</li>
<li>24 Kara scenarios</li>
<li>38+ exercises with solutions</li>
<li>Programming of a Sokoban game with self-designed levels, a highscore, etc.</li>
</ul>


<h2>Sample Scenario</h2>

<p>That&#8217;s how a simple scenario of GreenfootKara looks like. You will find the complete exercise on the handout for chapter 1 (see downloads).</p>

<p><img src="http://edu.makery.ch/images/kara/greenfootkara-screenshot.png" title="GreenfootKara in Eclipse" ></p>

<p>What does the program in the screenshot do? It will get Kara around the first tree. The complete program can be written inside the <code>act()</code> method. For more complex scenarios you will likely have to create additional methods.</p>

<!-- more -->


<p>Kara&#8217;s world in the scenario above is loaded from the WorldSetup.txt file:</p>

<figure class='code'><figcaption><span>WorldSetup.txt</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='text'><span class='line'>World: Kara 07 Around Tree
</span><span class='line'>X: 10
</span><span class='line'>Y: 10
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@ # #  #.
</span></code></pre></td></tr></table></div></figure>


<p><code>X</code> and <code>Y</code> attributes define the width and height of the world. <code>@</code> represents the location of Kara while <code>#</code> stands for a tree and <code>.</code> for a leaf. The size of the world and the actor positions can easily be changed by editing the <em>WorldSetup.txt</em> file. You can also design new world setups by placing actors inside the world with the mouse and using the context menu | <code>saveWorldSetupToFile()</code> to save it to a file.</p>

<h2>How to Get Started</h2>

<p>First you must download and install <a href="http://greenfoot.org">Greenfoot</a>. After the installation you should be able to open and compile the predefined scenarios (see downloads below).</p>

<h3>Create Your Own Scenarios</h3>

<p>To create your own scenarios I recommend to just copy an existing scenario and make changes to the <em>WorldSetup.txt</em> file and the <em>MyKara</em> class.</p>

<p>Here is an example of a complete MyKara class:</p>

<figure class='code'><figcaption><span>MyKara.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MyKara is a subclass of Kara. Therefore, it inherits all methods of Kara: &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * &lt;i&gt;MyKara ist eine Unterklasse von Kara. Sie erbt damit alle Methoden der Klasse Kara:&lt;/i&gt; &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Actions:     move(), turnLeft(), turnRight(), putLeaf(), removeLeaf() &lt;b&gt;</span>
</span><span class='line'><span class="cm"> * Sensors:     onLeaf(), treeFront(), treeLeft(), treeRight(), mushroomFront()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyKara</span> <span class="kd">extends</span> <span class="n">Kara</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * In the &#39;act()&#39; method you can write your program for Kara &lt;br&gt;</span>
</span><span class='line'><span class="cm">     * &lt;i&gt;In der Methode &#39;act()&#39; koennen die Befehle fuer Kara programmiert werden&lt;/i&gt;</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">act</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      <span class="n">turnRight</span><span class="o">();</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To change the name of the world setup file that is used to build the world: Change the String constant <code>WORLD_SETUP_FILE</code> inside the <em>KaraWorld</em> class.</p>

<h2>GreenfootKara Downloads</h2>

<p>Instructions, handouts, and scenarios can be downloaded from the Swisseduc website: <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/greenfootkara/greenfootkara-english.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GreenfootKara on Swisseduc (English)'" > GreenfootKara Downloads (English)</a> <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/greenfootkara/index.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GreenfootKara on Swisseduc (German)'" > GreenfootKara Downloads (German)</a></p>

<p>The GreenfootKara source can be found on GitHub (feedback and bug reports are welcome!): <br/>
<a href="https://github.com/marcojakob/greenfoot-kara"><img class="nobox middle" src="http://edu.makery.ch/images/glyphicons_github.png" title="'GreenfootKara on GitHub'" > GreenfootKara Source on GitHub</a></p>

<h2>Feedback</h2>

<p>I would appreciate any feedback of your experience with GreenfootKara. You can write an <a href="http://edu.makery.ch/about">E-Mail</a> or leave a comment at the bottom of this blog entry. If you create your own exercises and scenarios I would be glad to post or link them on this blog so others could use them too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Programming with Kara]]></title>
    <link href="http://edu.makery.ch/blog/2012/10/02/introduction-to-programming-with-kara/"/>
    <updated>2012-10-02T22:00:00+02:00</updated>
    <id>http://edu.makery.ch/blog/2012/10/02/introduction-to-programming-with-kara</id>
    <content type="html"><![CDATA[<p>Kara offers a playful introduction to fundamental concepts of programming. Kara is a ladybug that lives in a simple world with trees, leafs and mushrooms.</p>

<p><img src="http://edu.makery.ch/images/kara/kara.png" title="Kara" >
<img src="http://edu.makery.ch/images/kara/mushroom.png" title="Mushroom" >
<img src="http://edu.makery.ch/images/kara/leaf.png" title="Leaf" >
<img src="http://edu.makery.ch/images/kara/tree.png" title="Tree" ></p>

<p>The rules of Kara&#8217;s world are simple:</p>

<h4>Actions</h4>

<ul>
<li>Kara can move around with <code>move()</code> (Kara can push a mushroom, can step on leafs but can&#8217;t walk through trees)</li>
<li>Kara turns left or right with <code>turnLeft()</code> or <code>turnRight()</code></li>
<li>Kara puts down a leaf with <code>putLeaf()</code></li>
<li>Kara picks up a leaf with <code>removeLeaf()</code></li>
</ul>


<h4>Sensors</h4>

<ul>
<li>Kara checks if he stands on a leaf with <code>onLeaf()</code></li>
<li>Kara checks if there is a tree with <code>treeFront()</code>, <code>treeLeft()</code>, or <code>treeRight()</code></li>
<li>Kara checks if there is a mushroom in front with <code>mushroomFront()</code></li>
</ul>


<h2>A Sample Exercise</h2>

<p>Kara is placed in the following world setup and must be programmed to collect all leafs until he reaches the tree:</p>

<p><img src="http://edu.makery.ch/images/kara/kara-example-collect-leafs.png" title="Kara Collects Leafs" ></p>

<p>One solution would be as follows:</p>

<figure class='code'><figcaption><span>Kara collects leafs (Java)</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="k">while</span> <span class="o">(!</span><span class="n">treeFront</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">onLeaf</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">removeLeaf</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">move</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kara Versions - Which Kara Should I Use?</h2>

<p>Kara has many different versions. The original Kara is designed as a finite state machine with a purely graphical program editor. See the full list of <a href="http://www.swisseduc.ch/informatik/karatojava/index.html">available Kara versions</a>.</p>

<p>I usually prefer to start directly with writing Java code. Now there are three possible editors/libraries:</p>

<h3>JavaKara</h3>

<p>JavaKara is the original editor. You can find the <a href="http://www.swisseduc.ch/informatik/karatojava/javakara/index.html">JavaKara download and resources here</a> (in German).</p>

<h3>GreenfootKara</h3>

<p>Since I really like the editor of the <a href="http://greenfoot.org">Greenfoot IDE</a> I decided to create a Kara version that works with Greenfoot, it is called GreenfootKara. In addition to this I wrote an entire beginners course of 16-20 lessons with exercises and handouts to go along with GreenfootKara. You can find the links to the German and English versions on the <a href="http://edu.makery.ch/learn-java">Learn Java</a> page.</p>

<h3>GameGridKara</h3>

<p>Sometimes, especially if time is too short, it might be good to directly start with a professional development environment like Eclipse or NetBeans. Since it was not possible to integrate Greenfoot into Eclipse/NetBeans, I had to find another solution. Altough, we could start JavaKara from Eclipse/NetBeans, there are just some things that are not possible (like programming an interactive Kara game). The solution was to port the code to work with a library called <a href="http://gamegrid.ch">JGameGrid</a>.</p>

<p>GameGridKara enables us to use Kara in any IDE of our choice by simply adding two jar files to a project. The link to GameGridKara with the adjusted beginners course in German and English can be found on the <a href="http://edu.makery.ch/learn-java">Learn Java</a> page.</p>
]]></content>
  </entry>
  
</feed>