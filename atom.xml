<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[edu.makery.ch]]></title>
  <link href="http://edu.makery.ch/atom.xml" rel="self"/>
  <link href="http://edu.makery.ch/"/>
  <updated>2013-06-10T18:08:08+02:00</updated>
  <id>http://edu.makery.ch/</id>
  <author>
    <name><![CDATA[Marco Jakob]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaFX Deployment on Mac OS]]></title>
    <link href="http://edu.makery.ch/blog/2013/02/11/javafx-deployment-on-mac-os/"/>
    <updated>2013-02-11T15:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/02/11/javafx-deployment-on-mac-os</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp07.png"></p>

<p>Eskil, one of my students, provided me with information about how to deploy the JavaFX AddressApp on Mac OS.</p>

<p>I&#8217;ve updated the <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7/">AddressApp Tutorial Part VII</a> with instructions about JavaFX deployment for Mac.</p>

<p>To see how the end result will look like you can download it as a Mac OS dmg drag-and-drop installer: <a href="https://www.dropbox.com/s/cfpr4bh25u8qsmz/AddressApp.dmg">AddressApp.dmg</a></p>

<p>Thank you Eskil for providing this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Scene Builder and e(fx)clipse Updates]]></title>
    <link href="http://edu.makery.ch/blog/2013/02/08/javafx-scene-builder-and-efxclipse-updates/"/>
    <updated>2013-02-08T21:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/02/08/javafx-scene-builder-and-efxclipse-updates</id>
    <content type="html"><![CDATA[<p>I&#8217;m excited about the quick reaction to bug reports by the JavaFX developers at Oracle! I&#8217;ve reported an (annoying) Scene Builder <a href="http://javafx-jira.kenai.com/browse/DTL-5402">bug</a> at the end of November and it was already fixed in a new Scene Builder version in January.</p>

<h2>Scene Builder Update</h2>

<p>The Scene Builder bug forced us to delete and then reselect the controller class every time we reopened a <code>fxml</code> file in Scene Builder. This is fixed in <code>Scene Builder 1.1 beta 17</code> and above. So <strong>I recommend you update to the newest version</strong>:</p>

<!-- more -->


<ul>
<li>Go to <a href="http://www.oracle.com/technetwork/java/javafx/tools/index.html">JavaFX Scene Builder Page</a> and download the newest <strong>JavaFX Scene Builder 1.1 Early Access</strong> edition.</li>
</ul>


<p>I&#8217;ve updated the AddressApp Tutorial <a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3/">Part III</a>, <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V</a> and <a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI</a> where I mentioned the bug.</p>

<h2>e(fx)clipse Update</h2>

<p>The (very helpful) JavaFX plugin for Eclipse has been updated to <a href="http://tomsondev.bestsolution.at/2013/01/06/efxclipse-0-8-0-released/">version 0.8.0</a>.</p>

<p>As Tom Schindl, the author of e(fx)clipse, mentioned in a <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7#comment-742775781">comment</a> to <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">AddressApp Tutorial Part VII</a>, we might not need to explicitly start Eclipse with a JDK to do the deployment (Step 1 in the tutorial).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Date Picker]]></title>
    <link href="http://edu.makery.ch/blog/2013/01/07/javafx-date-picker/"/>
    <updated>2013-01-07T15:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/01/07/javafx-date-picker</id>
    <content type="html"><![CDATA[<p>As JavaFX 2.2 doesn&#8217;t contain a Calendar control we would have to create our own to provide a convenient way to enter a date. Fortunately, <a href="http://myjavafx.blogspot.ch/2012/01/javafx-calendar-control.html">Christian Schudt</a> has created a very nice DatePicker that we can use:</p>

<p><img src="http://edu.makery.ch/images/javafx-date-picker/javafx-date-picker-01.png"></p>

<!-- more -->


<p>I modified <a href="http://myjavafx.blogspot.ch/2012/01/javafx-calendar-control.html">Christian Schudt&#8217;s</a> <code>DatePicker</code> class a little with a few additional lines at the end of the constructor. One change is to let the <code>DatePicker</code> grow horizontally with its parent and the other change passes the style sheet to the popup.</p>

<p>You can <strong>download</strong> a <code>jar</code> with my modified version and the stylesheet that goes with it:</p>

<ul>
<li><a href="http://edu.makery.ch/downloads/javafx-date-picker/schudt-javafx-datepicker-0.0.2.jar">schudt-javafx-datepicker-0.0.2.jar</a>

<ul>
<li>Version 0.0.2 contains a fix for the Japanese language (credits to mas0061)</li>
</ul>
</li>
<li><a href="http://edu.makery.ch/downloads/javafx-date-picker/DatePicker.css">DatePicker.css</a></li>
</ul>


<h2>Integrating the Date Picker with AddressApp</h2>

<p>I&#8217;ll show how you can use the <code>DatePicker</code> by integrating it with our <strong>AddressApp</strong> example. You can download the full AddressApp example from the <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">AddressApp Tutorial Part VII</a> (at the very end of the blog post).</p>

<h3>Add the Library and CSS</h3>

<p>Download and add the <code>schudt-javafx-datepicker-x-x-x.jar</code> file from above to the <code>lib</code> folder. Add it to the classpath with <em>right-click | Build Path | Add to Build Path</em>.</p>

<p>Add the <code>DatePicker.css</code> file to the <code>ch.makery.address.view</code> package.</p>

<h3>Prepare the View for the DatePicker</h3>

<p>In our <code>PersonEditDialog</code> we have a simple text field for the Date. This is not very convenient and we&#8217;d like to replace this with the new <code>DatePicker</code>.</p>

<p>First, delete the birthday text field from <code>PersonEditDialog.fxml</code> (using the SceneBuilder).</p>

<p>We won&#8217;t be able to add the custom <code>DatePicker</code> directly in SceneBuilder (at least not with the current SceneBuilder). We&#8217;ll need to add it manually in the Java code. Delete the <code>birthdayField</code> from the <code>PersonEditDialogController</code> and add the following fields instead:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">GridPane</span> <span class="n">gridPane</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">DatePicker</span> <span class="n">birthdayDatePicker</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, open the <code>PersonEditDialog.fxml</code> in SceneBuilder. Select the GridPane and choose <code>gridPane</code> as <code>fx:id</code>.</p>

<h3>Initialize the DatePicker</h3>

<p>Create the <code>DatePicker</code> in the <code>initialize()</code> method as follows:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Initialize the DatePicker for birthday</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatePicker</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">ENGLISH</span><span class="o">);</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">setDateFormat</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getCalendarView</span><span class="o">().</span><span class="na">todayButtonTextProperty</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;Today&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getCalendarView</span><span class="o">().</span><span class="na">setShowWeeks</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getStylesheets</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ch/makery/address/view/DatePicker.css&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add DatePicker to grid</span>
</span><span class='line'>  <span class="n">gridPane</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Some Further Adjustments</h3>

<p>Change in <code>setPerson(...)</code>:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPerson</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">person</span> <span class="o">=</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">firstNameField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">());</span>
</span><span class='line'>  <span class="n">lastNameField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getLastName</span><span class="o">());</span>
</span><span class='line'>  <span class="n">streetField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getStreet</span><span class="o">());</span>
</span><span class='line'>  <span class="n">postalCodeField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getPostalCode</span><span class="o">()));</span>
</span><span class='line'>  <span class="n">cityField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getCity</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">setSelectedDate</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">().</span><span class="na">getTime</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">setSelectedDate</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change in <code>handleOk()</code>:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleOk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">isInputValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setPostalCode</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">()));</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Calendar</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getSelectedDate</span><span class="o">());</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setBirthday</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">okClicked</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change in <code>isInputValid()</code>:</p>

<figure class='code'><figcaption><span>PersonEditDialogController</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isInputValid</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">errorMessage</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid first name!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid last name!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid street!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid postal code!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// try to parse the postal code into an int</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid postal code (must be an integer)!\n&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid city!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>  <span class="c1">// CHANGE STARTS HERE</span>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">getSelectedDate</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid birthday!\n&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">birthdayDatePicker</span><span class="o">.</span><span class="na">invalidProperty</span><span class="o">().</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid birthday. Use the format yyyy-mm-dd!\n&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>  <span class="c1">// CHANGE ENDS HERE</span>
</span><span class='line'>  <span class="c1">////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">errorMessage</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Show the error message</span>
</span><span class='line'>    <span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">dialogStage</span><span class="o">,</span> <span class="n">errorMessage</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Please correct invalid fields&quot;</span><span class="o">,</span> <span class="s">&quot;Invalid Fields&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tweaking the DatePicker</h2>

<p>For further details about how to tweak the <code>DatePicker</code> see <a href="http://myjavafx.blogspot.ch/2012/01/javafx-calendar-control.html">JavaFX Calendar Control</a> on Christian Schudt&#8217;s Blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Snapshot as PNG Image]]></title>
    <link href="http://edu.makery.ch/blog/2013/01/04/javafx-snapshot-as-png-image/"/>
    <updated>2013-01-04T14:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2013/01/04/javafx-snapshot-as-png-image</id>
    <content type="html"><![CDATA[<p>JavaFX 2.2 and above provides a convenient <code>snapshot</code> feature. It takes a snapshot of any node or scene.</p>

<p>The following method saves the <code>barChart</code> node as a <code>png</code> image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveAsPng</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">WritableImage</span> <span class="n">image</span> <span class="o">=</span> <span class="n">barChart</span><span class="o">.</span><span class="na">snapshot</span><span class="o">(</span><span class="k">new</span> <span class="n">SnapshotParameters</span><span class="o">(),</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// TODO: probably use a file chooser here</span>
</span><span class='line'>  <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;chart.png&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ImageIO</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">SwingFXUtils</span><span class="o">.</span><span class="na">fromFXImage</span><span class="o">(</span><span class="n">image</span><span class="o">,</span> <span class="kc">null</span><span class="o">),</span> <span class="s">&quot;png&quot;</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO: handle exception here</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: You could test this code with our <strong>AddressApp</strong> example (see download at the end of <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">AddressApp Tutorial Part VII</a>). Just add the <code>saveAsPng()</code> method to the <code>BirthdayStatisticsController</code> class and call the method through some action (e.g. a new button).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX Event Handlers and Change Listeners]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/19/javafx-event-handlers-and-change-listeners/"/>
    <updated>2012-12-19T19:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/19/javafx-event-handlers-and-change-listeners</id>
    <content type="html"><![CDATA[<p>Very often in JavaFX we have to react to user events: The user clicks a button, presses a key, moves the mouse, etc. This post describes how to handle such events.</p>

<p>We&#8217;ll try to do as much event handling with <em>Scene Builder</em> and <code>fxml</code> as possible. For some events we&#8217;ll add event handling in the Java code of the controller.</p>

<p>Our example covers some of the most used events on common JavaFX 2 controls:</p>

<p><img src="http://edu.makery.ch/images/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners-01.png"></p>

<!-- more -->


<p>Note: For background information refer to the official <a href="http://docs.oracle.com/javafx/2/events/jfxpub-events.htm">JavaFX Events Tutorial</a> (does not cover <code>fxml</code>).</p>

<h2>Set Up</h2>

<p>Set up a simple JavaFX project with an <strong>fxml</strong> file, a corresponding <strong>controller</strong> class and a main class to load the fxml. Alternatively, just download the source at the end of this post.</p>

<h2>Button Events</h2>

<p>Handling <code>Button</code> events is very easy. Altough there are other events we&#8217;ll likely only need <code>ActionEvent</code>s.</p>

<p>First, open the <strong>controller</strong> class. Add a new method to handle button action events:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleButtonAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;Button Action\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: The <code>outputTextArea</code> is just a JavaFX <code>TextArea</code> to print some output. You could also do a <code>System.out.println(...)</code>.</p>

<p>Now, open the <strong>fxml</strong> file in <em>Scene Builder</em>, select a button and choose <code>#handleButtonAction</code> as <em>On Action</em>.</p>

<p><img src="http://edu.makery.ch/images/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners-02.png"></p>

<p>This should already be enough for the button to work. If we need more information about the event that called our method in the controller, we could add a parameter like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleButtonAction</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CheckBox Events</h2>

<p>Handling <code>CheckBox</code> events works almost the same as handling <code>Button</code> events. The only difference is that we might need to know the current state of the <code>CheckBox</code>, wheter it is selected or not.</p>

<p>For such information we must have a reference to the <code>CheckBox</code>. So, we&#8217;ll add an instance variable at the beginning of our <strong>controller</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">CheckBox</span> <span class="n">checkBox</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Open <em>Scene Builder</em>, choose the <code>checkBox</code> variable as <code>fx:id</code> for the <code>CheckBox</code>.</p>

<p><img src="http://edu.makery.ch/images/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners-03.png"></p>

<p>Now create a handler method and choose it as <em>On Action</em> in <em>Scene Builder</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleCheckBoxAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;CheckBox Action (selected: &quot;</span> <span class="o">+</span> <span class="n">checkBox</span><span class="o">.</span><span class="na">isSelected</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ComboBox Events</h2>

<p>For the <code>ComboBox</code> (and later for the <code>ListView</code>) we&#8217;ll use a simple model class called <code>Person</code> with a <code>firstName</code> and <code>lastName</code> attribute:</p>

<figure class='code'><figcaption><span>Person.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s start with the <code>ComboBox</code> stuff:</p>

<p>First, create an instance variable for the <code>ComboBox</code> and an <code>ObservableList</code> in our <strong>controller</strong> class. Select the <code>comboBox</code> variable as <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ComboBox</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">comboBox</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">comboBoxData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, add some data (e.g. in the constructor or initialize method):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Hans&quot;</span><span class="o">,</span> <span class="s">&quot;Muster&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Ruth&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Heinz&quot;</span><span class="o">,</span> <span class="s">&quot;Kurz&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Cornelia&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">comboBoxData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Werner&quot;</span><span class="o">,</span> <span class="s">&quot;Meyer&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third, set the data into the list. This must be in the <code>initialize()</code> method as this is the time when we can be shure that the variable <code>comboBox</code> is initialized with the <code>ComboBox</code> from the <code>fxml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">comboBox</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">comboBoxData</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Fourth, create a handler method and select the method as <em>On Action</em> in <em>Scene Builder</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleComboBoxAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">selectedPerson</span> <span class="o">=</span> <span class="n">comboBox</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">getSelectedItem</span><span class="o">();</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;ComboBox Action (selected: &quot;</span> <span class="o">+</span> <span class="n">selectedPerson</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hyperlink Events</h2>

<p><code>Hyperlink</code>s can be used the same way as a <code>Button</code> (see above).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleHyperlinkAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;Hyperlink Action\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Slider Events</h2>

<p><code>Slider</code>s don&#8217;t have <code>ActionEvent</code>s. Instead they have a <code>Number</code> called <code>valueProperty</code> that contains the current value of the slider.</p>

<h3>Change Listener</h3>

<p>In JavaFX a <code>Property</code> is more than just a simple value. Each <code>Property</code> provides methods to observe changes made to its value. We can <strong>&#8220;listen for changes&#8221;</strong>.</p>

<p>So, create an instance variable and select it <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Slider</span> <span class="n">slider</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>initialize()</code> method add a <code>ChangeListener</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="c1">// Listen for Slider value changes</span>
</span><span class='line'><span class="n">slider</span><span class="o">.</span><span class="na">valueProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Number</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">Number</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;Slider Value Changed (newValue: &quot;</span> <span class="o">+</span> <span class="n">newValue</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This construct looks a bit coplicated. Fortunately, it&#8217;s always the same pattern for every <code>ChangeListener</code>. Let me explain:</p>

<ol>
<li><code>slider.valueProperty()</code> gives us access to the <code>Property</code>. <br/>
<strong>Note:</strong> There are many other <code>Properties</code> like <code>focusedProperty() or</code>disabledProperty()<code>. We could use any of those properties and add a</code>ChangeListener` to it.</li>
<li><code>addListener(...)</code> expects a <code>ChangeListener</code> of type <code>Number</code>. <code>ChangeListener</code> is an interface so we need to create a concrete class that <code>implements ChangeListener</code>:

<ul>
<li>Normally, we would create a new class implementing the <code>ChangeListener</code> interface like this: <code>public class MyChangeListener implements ChangeListener&lt;Number&gt; {...}</code>. Then, we&#8217;d create an instance of this class and pass it to <code>addListener(...)</code>.</li>
<li>Since we will <em>use this class only once</em>, it&#8217;s a bit overkill to create a normal class. Instead we can use a short form of creating a class and instantiating it. This is called an <strong>Anonymous Inner Class</strong> as it does not have a name.</li>
</ul>
</li>
<li><code>new ChangeListener&lt;Number&gt;() {...}</code> creates such an <em>Anonymous Inner Class</em> of type <code>&lt;Number&gt;</code>.</li>
<li>Every <code>ChangeListener</code> must have a method called <code>changed(...)</code> that will be called every time a change occurs.</li>
</ol>


<h2>TextBox Events</h2>

<p>In a <code>TextBox</code> the <code>ActionEvent</code> is triggered with the return key. We might use this, but probably the most common case is that we must react to changes made to the text.</p>

<p>First, we&#8217;ll create an instance variable and select it as <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">TextField</span> <span class="n">textField</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how we can react to changes of the text. We&#8217;ll use a <code>ChangeListener</code> as described above (see Slider section):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="c1">// Listen for TextField text changes</span>
</span><span class='line'><span class="n">textField</span><span class="o">.</span><span class="na">textProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">String</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;TextField Text Changed (newValue: &quot;</span> <span class="o">+</span> <span class="n">newValue</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ListView Events</h2>

<p>We&#8217;ll use the same <code>Person</code> class as we used for the <code>ComboBox</code> above.</p>

<p>First, create an instance variable for the <code>ListView</code> and an <code>ObservableList</code> in our <strong>controller</strong> class. Select the <code>listView</code> variable as <code>fx:id</code> in <em>Scene Builder</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ListView</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">listView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">listViewData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, add some data (e.g. in the constructor or initialize method):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Lydia&quot;</span><span class="o">,</span> <span class="s">&quot;Kunz&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;Best&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">listViewData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Martin&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third, set the data into the list. This must be in the <code>initialize()</code> method as this is the time when we can be shure that the variable <code>listView</code> is initialized with the <code>ListView</code> from the <code>fxml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">listViewData</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Fourth, also in the <code>initialize()</code> method, we&#8217;ll add a <code>ChangeListener</code>. It is the same ChangeListener pattern as described above (see Slider section):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">selectedItemProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Person</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>          <span class="n">Person</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">Person</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">outputTextArea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="s">&quot;ListView Selection Changed (newValue: &quot;</span> <span class="o">+</span> <span class="n">newValue</span> <span class="o">+</span> <span class="s">&quot;)\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download Example Source</h2>

<p>Download the complete <a href="http://edu.makery.ch/downloads/javafx-event-handlers-and-change-listeners/javafx-event-handlers-and-change-listeners.zip">event-handlers example source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX TableView Cell Renderer]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/19/javafx-tableview-cell-renderer/"/>
    <updated>2012-12-19T03:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/19/javafx-tableview-cell-renderer</id>
    <content type="html"><![CDATA[<p>In this post I will show how to customize the rendering of a JavaFX 2 TableView. The <em>Birthday</em> column in the screenshot below is a formatted <code>Calendar</code> object. Depending on the year, the text color is changed.</p>

<p><img src="http://edu.makery.ch/images/javafx-tableview-cell-renderer/javafx-tableview-cell-renderer-01.png"></p>

<!-- more -->


<h2>How a Table Cell is Rendered</h2>

<p>Each table cell will receive an object, in our case it is an instance of <code>Person</code>. To do the rendering, the cell will need a <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/TableColumn.html#setCellValueFactory(javafx.util.Callback"><code>Cell Value Factory</code></a>) and a <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/TableColumn.html#setCellFactory(javafx.util.Callback"><code>Cell Factory</code></a>):</p>

<h3>Cell Value Factory</h3>

<p>The cell must know which part of <code>Person</code> it needs to display. For all cells in the <em>birthday column</em> this will be the <code>Person</code>s <code>birthday</code> value.</p>

<p>This is our birthday column:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;</span> <span class="n">birthdayColumn</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And later during initialization, we&#8217;ll set the <code>Cell Value Factory</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">birthdayColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;(</span><span class="s">&quot;birthday&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far nothing too fancy.</p>

<h3>Cell Factory</h3>

<p>Once the cell has the value, it must know how to display that value. In our case, the birthday&#8217;s <code>Calendar</code> value must be formatted and colored depending on the year.</p>

<p><em>[update 2012-12-27: Set text to null if cell is empty. See <a href="http://edu.makery.ch/blog/2012/12/19/javafx-tableview-cell-renderer/#comment-746539504">comment</a> by James_D below]</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">birthdayColumn</span><span class="o">.</span><span class="na">setCellFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;,</span> <span class="n">TableCell</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">TableCell</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;</span> <span class="n">call</span><span class="o">(</span><span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">TableCell</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">Calendar</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">updateItem</span><span class="o">(</span><span class="n">Calendar</span> <span class="n">item</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">empty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">super</span><span class="o">.</span><span class="na">updateItem</span><span class="o">(</span><span class="n">item</span><span class="o">,</span> <span class="n">empty</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="o">(!</span><span class="n">empty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Use a SimpleDateFormat or similar in the format method</span>
</span><span class='line'>                <span class="n">setText</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="n">item</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">YEAR</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">setTextFill</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">CHOCOLATE</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">setTextFill</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setText</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Cell Factory</code> contains some complicated stuff (<em>Callback</em>, <em>Generics</em> and <em>Anonymous Inner Classes</em>). Don&#8217;t worry too much about all this. Just focus on the important part which is the <code>updateItem(...)</code> method.</p>

<p>This <code>updateItem(...)</code> method gets called whenever the cell should be rendered. We receive the <code>Calendar</code> item that must be rendered. If empty is <code>true</code> we don&#8217;t do anything. Otherwise we format the item and set the text of the cell. Depending on the year, we also set the text color.</p>

<h2>ListView and TreeView</h2>

<p>Note that the JavaFX 2 <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/ListView.html"><code>ListView</code></a> and <a href="http://docs.oracle.com/javafx/2/api/javafx/scene/control/TreeView.html"><code>TreeView</code></a> are rendered in a very similar way.</p>

<h2>Download</h2>

<p>Download the complete <a href="http://edu.makery.ch/downloads/javafx-tableview-cell-renderer/javafx-tableview-cell-renderer.zip">tableview-cell-renderer example</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX TableView Filter]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/18/javafx-tableview-filter/"/>
    <updated>2012-12-18T23:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/18/javafx-tableview-filter</id>
    <content type="html"><![CDATA[<p>The JavaFX 2 TableView lacks the ability for filtering. The intention before JavaFX 2.0 shipped was to include a <code>FilteredList</code> that would wrap an <code>ObservableList</code> (see Oracle forum <a href="https://forums.oracle.com/forums/thread.jspa?threadID=2350647">Filter rows on TableView</a>). Unfortunately, the filtering was removed again. It will appear in JavaFX 8 which won&#8217;t be released before late 2013.</p>

<p>In this post I will explain how we can manually do row filtering in JavaFX 2.</p>

<!-- more -->


<h2>Example Set Up</h2>

<p>As an example we&#8217;ll create a simple table that displays <code>Person</code>s. The table should be filtered whenever the user enters something in the text field.</p>

<p><img src="http://edu.makery.ch/images/javafx-tableview-filter/tableview-filter-01.png"></p>

<p>I prefer to define the user interface in <code>fxml</code> (with Scene Builder). The <code>fxml</code> looks like this:</p>

<figure class='code'><figcaption><span> (PersonTable.fxml)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/PersonTable.fxml'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?import java.lang.*?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import javafx.scene.control.*?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import javafx.scene.layout.*?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import javafx.scene.layout.AnchorPane?&gt;</span>
</span><span class='line'><span class="cp">&lt;?import jfxtras.labs.scene.control.*?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;AnchorPane</span> <span class="na">minWidth=</span><span class="s">&quot;315.0&quot;</span> <span class="na">prefHeight=</span><span class="s">&quot;300.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;315.0&quot;</span> <span class="na">xmlns:fx=</span><span class="s">&quot;http://javafx.com/fxml&quot;</span> <span class="na">fx:controller=</span><span class="s">&quot;PersonTableController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;children&gt;</span>
</span><span class='line'>    <span class="nt">&lt;TableView</span> <span class="na">fx:id=</span><span class="s">&quot;personTable&quot;</span> <span class="na">prefHeight=</span><span class="s">&quot;-1.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;-1.0&quot;</span> <span class="na">tableMenuButtonVisible=</span><span class="s">&quot;false&quot;</span> <span class="na">AnchorPane.bottomAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.leftAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.rightAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.topAnchor=</span><span class="s">&quot;40.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;columns&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TableColumn</span> <span class="na">maxWidth=</span><span class="s">&quot;5000.0&quot;</span> <span class="na">minWidth=</span><span class="s">&quot;10.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;120.0&quot;</span> <span class="na">text=</span><span class="s">&quot;First Name&quot;</span> <span class="na">fx:id=</span><span class="s">&quot;firstNameColumn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TableColumn</span> <span class="na">maxWidth=</span><span class="s">&quot;5000.0&quot;</span> <span class="na">minWidth=</span><span class="s">&quot;10.0&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;120.0&quot;</span> <span class="na">text=</span><span class="s">&quot;Last Name&quot;</span> <span class="na">fx:id=</span><span class="s">&quot;lastNameColumn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/columns&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/TableView&gt;</span>
</span><span class='line'>    <span class="nt">&lt;HBox</span> <span class="na">id=</span><span class="s">&quot;HBox&quot;</span> <span class="na">alignment=</span><span class="s">&quot;CENTER&quot;</span> <span class="na">spacing=</span><span class="s">&quot;5.0&quot;</span> <span class="na">AnchorPane.leftAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.rightAnchor=</span><span class="s">&quot;10.0&quot;</span> <span class="na">AnchorPane.topAnchor=</span><span class="s">&quot;10.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;children&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Label</span> <span class="na">text=</span><span class="s">&quot;Filter Table:&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextField</span> <span class="na">fx:id=</span><span class="s">&quot;filterField&quot;</span> <span class="na">prefWidth=</span><span class="s">&quot;-1.0&quot;</span> <span class="na">HBox.hgrow=</span><span class="s">&quot;ALWAYS&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/children&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/HBox&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/children&gt;</span>
</span><span class='line'><span class="nt">&lt;/AnchorPane&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll need a class <code>Person</code> for the model:</p>

<figure class='code'><figcaption><span> (Person.java)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/Person.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll need a <code>MainApp</code> to load everything:</p>

<figure class='code'><figcaption><span> (MainApp.java)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/MainApp.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXMLLoader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.Scene</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.layout.AnchorPane</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainApp</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;Table Filtering&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;PersonTable.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>          <span class="n">AnchorPane</span> <span class="n">page</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnchorPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>          <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>          <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error loading PersonTable.fxml!&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most interesting part is the <code>PersonTableController</code> which I&#8217;ll discuss a bit more now.</p>

<h2>Filtering</h2>

<p>For the filtering to work, we need <strong>two</strong> <code>ObservableList</code>s. One list contains the original <strong>master data</strong> while the other contains the <strong>filtered data</strong> that will be displayed in the table.</p>

<p>The constructor puts the same sample data in both the <code>masterData</code> and <code>filteredData</code> lists. In the beginning nothing is filtered and the two lists contain the same data.</p>

<p>We&#8217;ll also add a <code>ListChangeListener</code> to the <code>masterData</code>. Whenever something changes in <code>masterData</code> we&#8217;ll also have to update the <code>filteredData</code>.</p>

<p>Now let&#8217;s take a look at the code:</p>

<figure class='code'><figcaption><span> (PersonTableController.java)</span> <a href='http://edu.makery.ch/downloads/javafx-tableview-filter/PersonTableController.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.beans.value.ChangeListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.beans.value.ObservableValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.FXCollections</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.ListChangeListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.ObservableList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TableColumn</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TableView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TextField</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.cell.PropertyValueFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonTableController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">filterField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableView</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personTable</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">firstNameColumn</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lastNameColumn</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">masterData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">filteredData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The constructor. The constructor is called before the initialize()</span>
</span><span class='line'><span class="cm">  * method.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">PersonTableController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Add some sample data to the master data</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Hans&quot;</span><span class="o">,</span> <span class="s">&quot;Muster&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Ruth&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Heinz&quot;</span><span class="o">,</span> <span class="s">&quot;Kurz&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Cornelia&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Werner&quot;</span><span class="o">,</span> <span class="s">&quot;Meyer&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Lydia&quot;</span><span class="o">,</span> <span class="s">&quot;Kunz&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;Best&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Martin&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Initially add all data to filtered data</span>
</span><span class='line'>      <span class="n">filteredData</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">masterData</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Listen for changes in master data.</span>
</span><span class='line'>      <span class="c1">// Whenever the master data changes we must also update the filtered data.</span>
</span><span class='line'>      <span class="n">masterData</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ListChangeListener</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onChanged</span><span class="o">(</span><span class="n">ListChangeListener</span><span class="o">.</span><span class="na">Change</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Person</span><span class="o">&gt;</span> <span class="n">change</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">updateFilteredData</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Initializes the controller class. This method is automatically called</span>
</span><span class='line'><span class="cm">  * after the fxml file has been loaded.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Initialize the person table</span>
</span><span class='line'>      <span class="n">firstNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;firstName&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">lastNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;lastName&quot;</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Add filtered data to the table</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">filteredData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Listen for text changes in the filter text field</span>
</span><span class='line'>      <span class="n">filterField</span><span class="o">.</span><span class="na">textProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">String</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">String</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">updateFilteredData</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Updates the filteredData to contain all data from the masterData that</span>
</span><span class='line'><span class="cm">  * matches the current filter.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateFilteredData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">filteredData</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">p</span> <span class="o">:</span> <span class="n">masterData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">matchesFilter</span><span class="o">(</span><span class="n">p</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">filteredData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Must re-sort table after items changed</span>
</span><span class='line'>      <span class="n">reapplyTableSortOrder</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Returns true if the person matches the current filter. Lower/Upper case</span>
</span><span class='line'><span class="cm">  * is ignored.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param person</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">matchesFilter</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">filterString</span> <span class="o">=</span> <span class="n">filterField</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">filterString</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">filterString</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// No filter --&gt; Add all.</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">lowerCaseFilterString</span> <span class="o">=</span> <span class="n">filterString</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">indexOf</span><span class="o">(</span><span class="n">lowerCaseFilterString</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getLastName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">indexOf</span><span class="o">(</span><span class="n">lowerCaseFilterString</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Does not match</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">reapplyTableSortOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="o">?&gt;&gt;</span> <span class="n">sortOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">personTable</span><span class="o">.</span><span class="na">getSortOrder</span><span class="o">());</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">getSortOrder</span><span class="o">().</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">getSortOrder</span><span class="o">().</span><span class="na">addAll</span><span class="o">(</span><span class="n">sortOrder</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reacting to User Entering a Filter String</h3>

<p>At the end of the method <code>initialize()</code> we add a <code>ChangeListener</code> to the text property of the <code>TextField</code>. Whenever the user changes the text, the <code>updateFilteredData()</code> method is called.</p>

<p>In <code>updateFilteredData()</code> we remove all items in <code>filteredData</code> and only add the data matching the current filter.</p>

<h3>Changing Filter Behaviour</h3>

<p>The method <code>matchesFilter(...)</code> determines which <code>Person</code>s will be displayed. I chose to look both in the <code>firstName</code> and <code>lastName</code> fields for a match of the String while ignoring the case.</p>

<p>You could a different kind of filter behaviour in this method like Regular Expressions.</p>

<h3>Reapply Table Sort Order</h3>

<p>Whenever we change the filtering, the table must be resorted. The method <code>reapplyTableSortOrder()</code> is responsible to remove and set the sort order again.</p>

<h2>Conclusion</h2>

<p>Event though this might not be the fastest and most generic filtering approach, it&#8217;s still sufficient for many cases. For a more comfortable filtering we&#8217;ll have to wait for JDK 8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Java and JavaFX Learn Pages]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/18/new-java-and-javafx-learn-pages/"/>
    <updated>2012-12-18T15:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/18/new-java-and-javafx-learn-pages</id>
    <content type="html"><![CDATA[<p>I created two new pages to structure content on this website. The pages will guide you through the learning resources about Java and JavaFX:</p>

<ul>
<li><a href="http://edu.makery.ch/projects/learn-programming">Learn Programming</a> - Java resources and blog posts</li>
<li><a href="http://edu.makery.ch/projects/learn-javafx">Learn JavaFX</a> - JavaFX resources and blog posts</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part VII - Deployment with e(fx)clipse]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7/"/>
    <updated>2012-12-18T01:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7</id>
    <content type="html"><![CDATA[<p><strong>Updated Feb 11th, 2013</strong>: New instructions for Deployment on Mac OS. Thank you Eskil for providing me with this information!</p>

<p><strong>Updated May 22nd, 2013</strong>: Updated step 3 and step 4 for e(fx)clipse plugin version 0.8.1.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp01.png"></p>

<p>I thought I&#8217;d write one last part of this tutorial series to show how to deploy (i.e. package and publish) the AddressApp.</p>

<p>Download example AddressApp as</p>

<ul>
<li>Windows exe installer: <a href="https://www.dropbox.com/s/jk5ilt3p47c674z/AddressApp-0.7.exe">AddressApp-0.7.exe</a>.</li>
<li>MacOS dmg drag-and-drop installer: <a href="https://www.dropbox.com/s/cfpr4bh25u8qsmz/AddressApp.dmg">AddressApp.dmg</a> - Thank you Eskil for providing this!</li>
</ul>


<h2>Topics in Part VII</h2>

<ul>
<li>Deploying our JavaFX application as <strong>Native Package</strong> with e(fx)clipse</li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><a href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1">Part I - Scene Builder</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Part II - Model and TableView</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Part III - Interacting with the User</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Part IV - CSS Styling</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V - Storing Data as XML</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI - Statistics Chart</a></li>
<li><strong>Part VII - Deployment with e(fx)clipse</strong></li>
</ul>


<h2>What is Deployment</h2>

<p>Deplyoment is the process of packaging and delivering software to the user. This is a crucial part of software development since it&#8217;s the first contact a user has with our software.</p>

<p>Java advertises with the slogan <strong>Write Once, Run Anywhere</strong> to illustrate the <em>cross-platform</em> benefits of the Java language. Ideally, this means that our Java application can be run on any device equipped with a Java virtual machine (JVM).</p>

<p>In the past, the user experience for installing a Java application hasn&#8217;t always been smooth. If the user didn&#8217;t have the required Java version on his system, he had to be directed to install it first. This lead to some difficulties, e.g. need for admin rights, compatibility issues between Java versions, etc.</p>

<p>Fortunately, JavaFX 2 provides a new deployment option called <strong>Native Packaging</strong> (also called Self-Contained Application Package). A native package is a bundle containing both your application code and the (platform-specific) Java Runtime.</p>

<p>The official JavaFX documentation by Oracle contains an extensive guide for all possible <a href="http://docs.oracle.com/javafx/2/deployment/jfxpub-deployment.htm">JavaFX deployment options</a>.</p>

<p>In this post I will show how to create a <strong>Native Package</strong> with with Eclipse and the <a href="http://efxclipse.org"><strong>e(fx)clipse plugin</strong></a>. My current e(fx)clipse version is <strong>0.1.1</strong>.</p>

<h2>Create a Native Package</h2>

<p>The goal is to create a self-contained application in a single folder on the user&#8217;s computer. Here is how it will look like for our AddressApp (on Windows):</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp02.png"></p>

<p>The <code>app</code> folder contains our application data and the <code>runtime</code> folder contains the platform-specific Java runtime.</p>

<p>To make it even more comfortable for the user, we&#8217;ll provide an installer:</p>

<ul>
<li>A <code>.exe</code> file installer on windows</li>
<li>A <code>dmg</code> (drag and drop) installer for MacOS.</li>
</ul>


<p>The e(fx)clipse plugin will help us generate the native package and installer.</p>

<h3>Step 1 - eclipse.ini</h3>

<p><strong>Note</strong>: Step 1 might not be necessary with e(fx)clipse 0.8.0 and above. See <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7#comment-742775781">Tom Schindl&#8217;s comment</a> below (the author of e(fx)clipse).</p>

<p>JavaFX uses a tool called <a href="http://ant.apache.org/">Ant</a> to build and package the application. This tool is already included in Eclipse. As Ant depends on the JDK we need to make shure Eclipse itself runs with the JDK (not the JRE).</p>

<ol>
<li>Close Eclipse.</li>
<li>Find the folder of your Eclipse installation and open the file <code>eclipse.ini</code> in a text editor. This file contains Eclipse startup settings. On Mac OS X, eclipse.ini can be found by right-clicking Eclipse.app and selecting &#8220;Show package contents&#8221;. The file is located under Contents/MacOS.</li>
<li>After the line <code>openFile</code> add <code>-vm</code> and then specify your <strong>jdk installation directory</strong>. The end of the file should now look like this:</li>
</ol>


<figure class='code'><figcaption><span>eclipse.ini</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='text'><span class='line'>openFile
</span><span class='line'>-vm
</span><span class='line'>C:\Program Files\Java\jdk1.7.0_09\bin\javaw.exe
</span><span class='line'>-vmargs
</span><span class='line'>-Xms40m
</span><span class='line'>-Xmx512m
</span></code></pre></td></tr></table></div></figure>


<p><strong>Mac OS</strong>: For Mac OS, path can be something like /Library/Java/JavaVirtualMachines/jdk1.7.0_07.jdk/Contents/Home/bin/java (In my version the javaw.exe does not exist but I specified &#8220;java&#8221; instead which seemed no problem)</p>

<h3>Step 2 - Installer Icons</h3>

<p>We would like to have some nice icons for our installer:</p>

<ol>
<li>Download <a href="http://edu.makery.ch/downloads/javafx-addressapp/part-7/AddressApp.ico">AddressApp.ico</a>, <a href="http://edu.makery.ch/downloads/javafx-addressapp/part-7/AddressApp-setup-icon.bmp">AddressApp-setup-icon.bmp</a> and <a href="http://edu.makery.ch/downloads/javafx-addressapp/part-7/AddressApp.icns">AddressApp.icns</a>.</li>
<li>Copy the three icons to the project root of your AddressApp project in Eclipse.</li>
</ol>


<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp03.png"></p>

<h3>Step 3 - Edit build.fxbuild</h3>

<p>The file <code>build.fxbuild</code> is used by e(fx)clipse to generate a file that will be used by the Ant build tool. If you don&#8217;t have a <code>build.fxbuild</code> file, create a new <em>Java FX Project</em> in Eclipse and copy the generated file.</p>

<ol>
<li>Open <code>build.fxbuild</code> from your project root.</li>
<li><p>Fill out all the fields containing a star. For MacOS: Do not use spaces in Application title as this seems to cause a problem.  <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp04b.png"></p></li>
<li><p>As <strong>Packaging Format</strong> choose <code>exe</code> for Windows, <code>dmg</code> for MacOS, and <code>rpm</code> for Linux.</p></li>
<li><p>Click on the link <code>Generate ant build.xml only</code> (found on the right side).</p></li>
<li>Verify that a new <code>build</code> folder and a file <code>build.xml</code> is created.</li>
</ol>


<h3>Step 4 - Edit build.xml to include icons</h3>

<p>E(fx)clipse has generated a file <code>build/build.xml</code> which is ready to be executed by <strong>Ant</strong>. Our installer icons and resource icons just won&#8217;t work. If you don&#8217;t want icons you may skip this step.</p>

<p>As e(fx)clipse can&#8217;t be told (yet?) to include additional resources like our <code>resources</code> folder and the few installer icons we&#8217;ve added above, we have to manually edit the <code>build.xml</code>:</p>

<p>Open <code>build.xml</code> and find the path <code>fxant</code>. Add one line for the <code>${basedir}</code> (will make our installer icons available):</p>

<figure class='code'><figcaption><span>build.xml</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">&quot;fxant&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;filelist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;${java.home}\..\lib\ant-javafx.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;${java.home}\lib\jfxrt.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;file</span> <span class="na">name=</span><span class="s">&quot;${basedir}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/filelist&gt;</span>
</span><span class='line'><span class="nt">&lt;/path&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Find the following block further down in the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fx:resources</span> <span class="na">id=</span><span class="s">&quot;appRes&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fx:fileset</span> <span class="na">dir=</span><span class="s">&quot;dist&quot;</span> <span class="na">includes=</span><span class="s">&quot;AddressApp.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fx:fileset</span> <span class="na">dir=</span><span class="s">&quot;dist&quot;</span> <span class="na">includes=</span><span class="s">&quot;libs/*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/fx:resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Replace</strong> the four lines obove with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;dist/resources&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">&quot;dist/resources&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;../resources&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/copy&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;package&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Icons only for Windows --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;package/windows&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">&quot;package/windows&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;..&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;include</span> <span class="na">name=</span><span class="s">&quot;AddressApp.ico&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;include</span> <span class="na">name=</span><span class="s">&quot;AddressApp-setup-icon.bmp&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/fileset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/copy&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">&lt;!-- Icons only for MacOS --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;package/macosx&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">&quot;package/macosx&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;..&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;include</span> <span class="na">name=</span><span class="s">&quot;AddressApp.icns&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/fileset&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/copy&gt;</span>       
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;fx:resources</span> <span class="na">id=</span><span class="s">&quot;appRes&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fx:fileset</span> <span class="na">dir=</span><span class="s">&quot;dist&quot;</span> <span class="na">includes=</span><span class="s">&quot;AddressApp.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fx:fileset</span> <span class="na">dir=</span><span class="s">&quot;dist&quot;</span> <span class="na">includes=</span><span class="s">&quot;libs/*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fx:fileset</span> <span class="na">dir=</span><span class="s">&quot;dist&quot;</span> <span class="na">includes=</span><span class="s">&quot;resources/**&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/fx:resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 5 (WINDOWS) - Windows exe Installer</h3>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp06.png"></p>

<p>With <strong>Inno Setup</strong> we can create a Windows Installer of our application as a single <code>.exe</code> file. The resulting <code>.exe</code> will perform a user level installation (no admin permissions required). A shortcut will be created (menu or desktop)</p>

<ol>
<li>Download <a href="http://www.jrsoftware.org/isdl.php">Inno Setup 5 or later</a>. Install Inno Setup on your computer. Our Ant script will use it to automatically generate the installer.</li>
<li>Tell Windows about the installation path to Inno Setup (e.g. <code>C:\Program Files (x86)\Inno Setup 5</code>): Add it to the <code>Path</code> variable in your windows environment variables. If you don&#8217;t know where to find it, read <a href="http://www.computerhope.com/issues/ch000549.htm">How to set the path and environment variables in Windows</a>.</li>
</ol>


<h3>Step 5 (MAC) - MacOS dmg Installer</h3>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp07.png"></p>

<p>To create a Mac OS <code>dmg</code> drag-and-drop installer, no additional tool is required.</p>

<p>Note: For the installer image to work it must have exactly the same name as the application.</p>

<h3>Step 5 (LINUX etc.) - Linux rpm Installer</h3>

<p>For other packaging options (<code>msi</code> for windows, <code>rpm</code> for Linux) see this native packaging <a href="https://blogs.oracle.com/talkingjavadeployment/entry/native_packaging_for_javafx">blog post</a> or this <a href="http://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm#A1324980">oracle documentation</a>.</p>

<h3>Step 6 - Run build.xml</h3>

<p>As a final step, we run the <code>build.xml</code> with Ant: <em>Right-click</em> on the <code>build.xml</code> file | <em>Run As</em> | <em>Ant Build</em>.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-7/addressapp08.png"></p>

<p>The building <strong>will take a while</strong> (about 1 minute on my computer).</p>

<p>If everything was successful, you should find the native bundle in the folder <code>build/deploy/bundles</code>:</p>

<ul>
<li>Windows: The file <code>AddressApp-1.0.exe</code> can be used as a single file to install the application. This installer will copy the bundle to <code>C:/Users/[yourname]/AppData/Local/AddressApp</code>.</li>
<li>Hint: You could also use the subfolder <code>build/deploy/bundles/AddressApp</code> to deploy the application as a <code>.zip</code> file.</li>
</ul>


<hr />

<h3>What&#8217;s Next?</h3>

<p>I hope this tutorial was a help for you to get started with JavaFX and you&#8217;ll be able to write your own JavaFX project from here. I might add some further JavaFX blog posts outside of this tutorial series, we&#8217;ll see&#8230;</p>

<p>I appreciate any feedback. Feel free to write comments if you have any suggestions or if something was unclear.</p>

<h3>Download Source</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-7/addressapp-part-7.zip">Source of Tutorial Part VII</a> as Eclipse Project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating PDFs in Java]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/13/creating-pdfs-in-java/"/>
    <updated>2012-12-13T23:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/13/creating-pdfs-in-java</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/helpful-java-libraries/pdf.png"></p>

<p>A good library to create PDFs is <a href="http://itextpdf.com/">iText</a>. It is a very powerful library but can also be used for very basic PDF file creation.</p>

<ul>
<li><a href="http://sourceforge.net/projects/itext/">iText download</a></li>
</ul>


<p>There are many iText tutorials, here are just a couple:</p>

<ul>
<li><a href="http://www.vogella.com/articles/JavaPDF/article.html">iText Tutorial</a></li>
<li>Tutorials and <a href="http://www.roseindia.net/java/itext/index.shtml">many iText Examples</a>
Almost every application will need some way to persistently store data. There are many different ways to accomplish that. We&#8217;ll start with a simple way to save a small amount of data and continue to more advanced techniques.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting Data in Java]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/13/persisting-data-in-java/"/>
    <updated>2012-12-13T23:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/13/persisting-data-in-java</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/helpful-java-libraries/floppy.png"></p>

<p>Almost every application will need some way to persistently store data. There are many different ways to accomplish that. We&#8217;ll start with a simple way to save a small amount of data and continue to more advanced techniques.</p>

<!-- more -->


<p>Some of the techniques (Preferences, XML and reading/writing Files) described here were already used in the <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX Tutorial Part 5</a>.</p>

<h2>Preferences</h2>

<p>With the class <a href="http://docs.oracle.com/javase/7/docs/api/index.html?java/util/prefs/Preferences.html"><code>Preferences</code></a> of the standard Java library we can save some small values. Typically, you&#8217;d save some simple user preferences in it like path to the <em>last opened file</em>.</p>

<p>Depending on the operating system, the <code>Preferences</code> are saved in different places (e.g. the registry file in Windows).</p>

<ul>
<li><code>Preferences</code> example in <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX AddressApp Tutorial Part 5</a>.</li>
<li>Instructions in <em>German</em> in the book <a href="http://openbook.galileocomputing.de/javainsel/javainsel_11_009.html#dodtp29221705-11a7-4fe0-8f23-bfb46d58ff59">Java ist auch eine Insel</a></li>
</ul>


<h2>Saving Files</h2>

<p>There are various possibilities to load and save a file in Java.</p>

<ul>
<li>An example is the <code>FileUtil</code> helper class in <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX AddressApp Tutorial Part 5</a>.</li>
<li>The official Java <a href="http://docs.oracle.com/javase/tutorial/essential/io/fileio.html">File I/O Tutorial</a>.</li>
</ul>


<p>Simple text files can directly be saved to the disk. You construct a String (from objects) and save it using the means described above. But if you later want to read from the text files and use the information in your application, you might have some difficulties. You would have to manually parse the elements from one big unstructured String. Then, to get objects again, you would have to create new objects and fill them with the information from the String.</p>

<p>That&#8217;s why it helps to save data in some structured form like XML.</p>

<h2>XML with XStream</h2>

<p>XStream is a simple library to serialize objects to XML and back again. Serializing means that, given an object (which may contain a reference to other objects), XStream will create a single XML-String representing this object(s). The XML-String can then be saved to a file. XStream will later accept this XML-String to reproduce the object(s) again.</p>

<ul>
<li>XML example in <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">JavaFX AddressApp Tutorial Part 5</a>.</li>
<li>Official <a href="http://xstream.codehaus.org/">XStream Website</a> with a good <a href="http://xstream.codehaus.org/tutorial.html">Two Minute Tutorial</a>.</li>
</ul>


<p>When data gets more complex then a database instead of XML is appropriate.</p>

<h2>Java Database (also called Derby)</h2>

<p>Derby is an Open Source Database completely written in Java. The advantage of a pure Java database is that it can be embedded with the Java program (as opposed to being run as a separate, standalone server). Derby is based on the SQL Standard.</p>

<ul>
<li>Official <a href="http://db.apache.org/derby/">Apache Derby Website</a> containing downloads, manuals, etc.</li>
<li><a href="http://db.apache.org/derby/papers/DerbyTut/embedded_intro.html">Derby Tutorial</a> with an embedded example. <strong>Note:</strong> You will find the example <code>SimpleApp</code> inside the Derby zip under <code>demo/programs/simple/</code>.</li>
</ul>


<h3>Eclipse Data Tools Platform</h3>

<p>With the Eclipse <em>Data Tools Platform</em> plugin you can manage your database. This is very practical, especially to view the data that has been saved to the database.</p>

<ul>
<li><a href="http://www.vogella.de/articles/EclipseDataToolsPlatform/article.html">Eclipse Data Tools Platform Tutorial</a></li>
</ul>


<h2>Database with a Mapper Tool and MySQL (Advanced)</h2>

<p>Tools like <a href="http://www.hibernate.org/">Hibernate</a> and <a href="http://www.eclipse.org/eclipselink/">EclipseLink</a> help to fill the gap between the relational data in the database and objects (see <a href="http://de.wikipedia.org/wiki/Object-relational_impedance_mismatch">Object-relational impedance mismatch</a>).</p>

<ul>
<li><a href="http://www.javatips.net/blog/2011/12/hibernate-annotations-tutorial">Hibernate Tutorial</a></li>
<li>Other <a href="http://www.roseindia.net/hibernate/hibernate4/index.shtml">Hibernate Tutorials</a> with more information.</li>
<li>An extensive <a href="http://www.youtube.com/watch?v=Yv2xctJxE-w&amp;list=PL4AFF701184976B25&amp;index=1">Hibernate video tutorial series</a></li>
<li><a href="http://www.vogella.com/articles/JavaPersistenceAPI/article.html">EclipseLink Tutorial</a> - also using Derby Embedded Database (could be replaced by MySQL)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part VI - Statistics Chart]]></title>
    <link href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6/"/>
    <updated>2012-12-04T12:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-6/addressapp01.png"></p>

<h2>Topics in Part VI</h2>

<ul>
<li>Creating a <strong>Statistics Chart</strong> to display birthday distribution.</li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><a href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1">Part I - Scene Builder</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Part II - Model and TableView</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Part III - Interacting with the User</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Part IV - CSS Styling</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V - Storing Data as XML</a></li>
<li><strong>Part VI - Statistics Chart</strong></li>
<li><a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII - Deployment with e(fx)clipse</a></li>
</ul>


<h2>Birthday Statistics</h2>

<p>All our people in the AddressApp have a birthday. Wouldn&#8217;t it be nice to have some statistics about when our people celebrate their birthday.</p>

<p>We&#8217;ll use a <strong>Bar Chart</strong> containing a bar for each month. Each bar shows how many people have their birthday in that particular month.</p>

<h2>The Statistics FXML View</h2>

<ol>
<li>We start by creating a <code>BirthdayStatistics.fxml</code> file inside our <code>ch.makery.address.view</code> package (<em>Right-click on package | New | other&#8230; | New FXML Document</em>).</li>
<li>Open the <code>BirthdayStatistics.fxml</code> file in Scene Builder.</li>
<li>Select the root <code>AnchorPane</code> and set the <em>Pref Width</em> to 620 and the <em>Pref Height</em> to 450.</li>
<li>Add a <code>BarChart</code> to the <code>AnchorPane</code>.</li>
<li>Right-click on the <code>BarChart</code> and select <em>Fit to Parent</em>.</li>
<li>Save the fxml file, go to Eclipse and refresh the project.</li>
</ol>


<p>Before we&#8217;ll come back to Scene Builder, we&#8217;ll first create the controller and wire everything up in our MainApp.</p>

<h2>The Statistics Controller</h2>

<p>In the controller package <code>ch.makery.address</code> create a Java class called <code>BirthdayStatisticsController.java</code>.</p>

<p>Let&#8217;s first take a look at the entire controller class before I start explaining:</p>

<figure class='code'><figcaption><span> (BirthdayStatisticsController.java)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-6/BirthdayStatisticsController.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.DateFormatSymbols</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Calendar</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.FXCollections</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.ObservableList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.chart.BarChart</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.chart.CategoryAxis</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.chart.XYChart</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ch.makery.address.model.Person</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The controller for the birthday statistics view.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author Marco Jakob</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BirthdayStatisticsController</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BarChart</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">barChart</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">CategoryAxis</span> <span class="n">xAxis</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">monthNames</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Initializes the controller class. This method is automatically called</span>
</span><span class='line'><span class="cm">  * after the fxml file has been loaded.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Get an array with the English month names.</span>
</span><span class='line'>      <span class="n">String</span><span class="o">[]</span> <span class="n">months</span> <span class="o">=</span> <span class="n">DateFormatSymbols</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">ENGLISH</span><span class="o">).</span><span class="na">getMonths</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// Convert it to a list and add it to our ObservableList of months.</span>
</span><span class='line'>      <span class="n">monthNames</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">months</span><span class="o">));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">xAxis</span><span class="o">.</span><span class="na">setCategories</span><span class="o">(</span><span class="n">monthNames</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Sets the persons to show the statistics for.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param persons</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPersonData</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">persons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">monthCounter</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">12</span><span class="o">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Person</span> <span class="n">p</span> <span class="o">:</span> <span class="n">persons</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">month</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">MONTH</span><span class="o">);</span>
</span><span class='line'>          <span class="n">monthCounter</span><span class="o">[</span><span class="n">month</span><span class="o">]++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">XYChart</span><span class="o">.</span><span class="na">Series</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">series</span> <span class="o">=</span> <span class="n">createMonthDataSeries</span><span class="o">(</span><span class="n">monthCounter</span><span class="o">);</span>
</span><span class='line'>        <span class="n">barChart</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">series</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Creates a XYChart.Data object for each month. All month data is then</span>
</span><span class='line'><span class="cm">  * returned as a series.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param monthCounter Array with a number for each month. Must be of length 12!</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">XYChart</span><span class="o">.</span><span class="na">Series</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">createMonthDataSeries</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">monthCounter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">XYChart</span><span class="o">.</span><span class="na">Series</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">series</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XYChart</span><span class="o">.</span><span class="na">Series</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">monthCounter</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">XYChart</span><span class="o">.</span><span class="na">Data</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">monthData</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XYChart</span><span class="o">.</span><span class="na">Data</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">monthNames</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">monthCounter</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>          <span class="n">series</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">monthData</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">series</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How the Controller Works</h3>

<ol>
<li><p>The controller will need access to two elements from our FXML file:</p>

<ul>
<li>The <code>barChar</code>: It has the type <code>String</code> and <code>Integer</code>. The <code>String</code> is used for the month on the x-axis and the <code>Integer</code> is used for the number of people in a specific month.
We&#8217;ll use the reference to the <code>BarChart</code> to set our data.</li>
<li>The <code>xAxis</code>: We&#8217;ll use this to add the month Strings.</li>
</ul>
</li>
<li><p>The <code>initialize()</code> method fills the x-axis with a list of all the months.</p></li>
<li><p>The <code>setPersonData(...)</code> method will be accessed by the <code>MainApp</code> class to set the person data. It loops through all persons and counts the birthdays per month.</p></li>
<li><p>The <code>createMonthDataSeries(...)</code> method takes the array with a number for each month and creates the chart data. For each month a new <code>XYChart.Data</code> object is created with the month name and the number of people having their birthday in this month. Each <code>XYChart.Data</code> object will represent one bar in the chart.</p></li>
</ol>


<h2>Connecting View and Controller</h2>

<ol>
<li>Open <code>BirthdayStatistics.fxml</code> in Scene Builder.</li>
<li>Select the root <code>AncherPane</code> and add the <code>BirthdayStatisticsController</code> as controller (in Code View).</li>
<li>Select the <code>BarChart</code> and choose <code>barChart</code> as fx:id Property.</li>
<li>Select the <code>CategoryAxis</code> and choose <code>xAxis</code> as fx:id Property.</li>
<li>You may add a title to the chart, remove the legend, etc. for further styling the chart.</li>
</ol>


<h2>Connecting the View/Controller with MainApp</h2>

<p>We&#8217;ll use the same mechanism for our <em>birthday statistics</em> that we used for the <em>edit person dialog</em>: A simple popup dialog containing.</p>

<p>Add the following method to your <code>MainApp</code> class:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Opens a dialog to show birthday statistics. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">showBirthdayStatistics</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Load the fxml file and create a new stage for the popup</span>
</span><span class='line'>    <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/BirthdayStatistics.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">AnchorPane</span> <span class="n">page</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnchorPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Stage</span> <span class="n">dialogStage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stage</span><span class="o">();</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;Birthday Statistics&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">initModality</span><span class="o">(</span><span class="n">Modality</span><span class="o">.</span><span class="na">WINDOW_MODAL</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">initOwner</span><span class="o">(</span><span class="n">primaryStage</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the persons into the controller</span>
</span><span class='line'>    <span class="n">BirthdayStatisticsController</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">getController</span><span class="o">();</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">setPersonData</span><span class="o">(</span><span class="n">personData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything is set up, but we don&#8217;t have anyone who actually calls the new <code>showBirthdayStatistics()</code> method. Luckily we already have a menu in <code>RootLayout.fxml</code> that can be used for this purpose.</p>

<h3>Show Birthday Statistics Menu</h3>

<p>In your <code>RootLayoutController</code> add the following method which will handle user clicks on the <em>show birthday statistics</em> menu item:</p>

<figure class='code'><figcaption><span>RootLayoutController.java  </span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Opens the birthday statistics.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleShowBirthdayStatistics</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mainApp</span><span class="o">.</span><span class="na">showBirthdayStatistics</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now open the <code>RootLayout.fxml</code> file with Scene Builder.</p>

<p>Select the <em>Show Statistics</em> <code>MenuItem</code> and choose <code>#handleShowBirthdayStatistics</code> for <code>On Action</code> (in Code view)</p>

<p><strong>Remember:</strong> You might need to remove the controller from the root, hit enter and set it again if the <code>handle...</code> method does not appear. Because of a <a href="http://javafx-jira.kenai.com/browse/DTL-5402">bug</a> in Scene Builder (<strong>fixed in Scene Builder 1.1 beta 17 and above!</strong>).</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-6/addressapp02.png"></p>

<p>Go to Eclipse, refresh the project and <strong>test it</strong>.</p>

<h2>More Information on JavaFX Charts</h2>

<p>A good place for more information is the official Oracle tutorial on <a href="http://docs.oracle.com/javafx/2/charts/jfxpub-charts.htm">Using JavaFX Charts</a>.</p>

<hr />

<h3>What&#8217;s Next?</h3>

<p>In the last tutorial <a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII</a> we will finally deploy our application (i.e. package and deliver the app to our users).</p>

<h3>Download Source</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-6/addressapp-part-6.zip">Source of Tutorial Part VI</a> as Eclipse Project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part V - Storing Data as XML]]></title>
    <link href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5/"/>
    <updated>2012-11-27T22:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-5/addressapp01.png"></p>

<h2>Topics in Part V</h2>

<ul>
<li><strong>Persisting data as XML</strong></li>
<li>Using the JavaFX <strong>FileChooser</strong></li>
<li>Using the JavaFX <strong>Menu</strong></li>
<li>Saving the last opened file path in <strong>user preferences</strong></li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><a href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1">Part I - Scene Builder</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Part II - Model and TableView</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Part III - Interacting with the User</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Part IV - CSS Styling</a></li>
<li><strong>Part V - Storing Data as XML</strong></li>
<li><a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI - Statistics Chart</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII - Deployment with e(fx)clipse</a></li>
</ul>


<h2>Saving User Preferences</h2>

<p>Java allows us to save some application state using a class called <code>Preferences</code>. Depending on the operating system, the <code>Preferences</code> are saved in different places (e.g. the registry file in Windows).</p>

<p>We won&#8217;t be able to use <code>Preferences</code> to store our entire address book. But it allows us to save some simple application state. One such thing is the path to the <em>last opened file</em>. With this information we could load the last application state whenever the user restarts the application.</p>

<p>The following two methods take care of saving and retrieving Preferences. Add them to the end of your <code>MainApp</code> class.</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the person file preference, i.e. the file that was last opened.</span>
</span><span class='line'><span class="cm"> * The preference is read from the OS specific registry. If no such</span>
</span><span class='line'><span class="cm"> * preference can be found, null is returned.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">File</span> <span class="nf">getPersonFilePath</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Preferences</span> <span class="n">prefs</span> <span class="o">=</span> <span class="n">Preferences</span><span class="o">.</span><span class="na">userNodeForPackage</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">filePath</span> <span class="o">=</span> <span class="n">prefs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;filePath&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">filePath</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Sets the file path of the currently loaded file.</span>
</span><span class='line'><span class="cm"> * The path is persisted in the OS specific registry.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param file the file or null to remove the path</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPersonFilePath</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Preferences</span> <span class="n">prefs</span> <span class="o">=</span> <span class="n">Preferences</span><span class="o">.</span><span class="na">userNodeForPackage</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">file</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">prefs</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;filePath&quot;</span><span class="o">,</span> <span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update the stage title</span>
</span><span class='line'>    <span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;AddressApp - &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">prefs</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">&quot;filePath&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update the stage title</span>
</span><span class='line'>    <span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;AddressApp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Persisting Data as XML</h2>

<p>At the moment our address application&#8217;s data only resides in memory. Every time we close the application, the data is lost. So it&#8217;s about time to start thinking persistently storing data.</p>

<h3>Why XML?</h3>

<p>One of the most common ways to persist data is using a database. Databases usually contain some kind of relational data (like tables) while the data we need to save are objects. This is called the <a href="http://wikipedia.org/wiki/Object-relational_impedance_mismatch">object-relational impedance mismatch</a>. It is quite some work to match objects to relational database tables. There are some of frameworks that help with the matching (e.g. <a href="http://www.hibernate.org/">Hibernate</a>, the most popular one) but it still requires quite some work to set up.</p>

<p>For our simple data model it&#8217;s much easier to use XML. We&#8217;ll use a library called <a href="http://xstream.codehaus.org/">XStream</a>. With just a few lines of code this will allow us to generate XML output like this:</p>

<figure class='code'><figcaption><span>sample.xml</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;list&gt;</span>
</span><span class='line'>  <span class="nt">&lt;person&gt;</span>
</span><span class='line'>    <span class="nt">&lt;firstName&gt;</span>Hans<span class="nt">&lt;/firstName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;lastName&gt;</span>Muster<span class="nt">&lt;/lastName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;street&gt;</span>some street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;postalCode&gt;</span>1234<span class="nt">&lt;/postalCode&gt;</span>
</span><span class='line'>    <span class="nt">&lt;city&gt;</span>some city<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;birthday&gt;</span>
</span><span class='line'>      <span class="nt">&lt;time&gt;</span>1354035227734<span class="nt">&lt;/time&gt;</span>
</span><span class='line'>      <span class="nt">&lt;timezone&gt;</span>Europe/Berlin<span class="nt">&lt;/timezone&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/birthday&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/person&gt;</span>
</span><span class='line'>  <span class="nt">&lt;person&gt;</span>
</span><span class='line'>    <span class="nt">&lt;firstName&gt;</span>Anna<span class="nt">&lt;/firstName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;lastName&gt;</span>Best<span class="nt">&lt;/lastName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;street&gt;</span>some street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;postalCode&gt;</span>1234<span class="nt">&lt;/postalCode&gt;</span>
</span><span class='line'>    <span class="nt">&lt;city&gt;</span>some city<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;birthday&gt;</span>
</span><span class='line'>      <span class="nt">&lt;time&gt;</span>1354035227734<span class="nt">&lt;/time&gt;</span>
</span><span class='line'>      <span class="nt">&lt;timezone&gt;</span>Europe/Berlin<span class="nt">&lt;/timezone&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/birthday&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/person&gt;</span>
</span><span class='line'><span class="nt">&lt;/list&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reading and Writing Files</h3>

<p>Since Java 7 there are some convenient classes to deal with reading and writing files. For a detailed tutorial see Oracle&#8217;s <a href="http://docs.oracle.com/javase/tutorial/essential/io/fileio.html">File I/O Tutorial</a>.</p>

<p>Since we might need to read/write files in different places of our application we&#8217;ll create a handy <code>FileUtil</code> helper class. This class provides one static method for reading from a file and one for writing to a file. Copy the following file into the <code>ch.makery.util</code> package:</p>

<figure class='code'><figcaption><span> (FileUtil.java)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-5/FileUtil.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">.</span><span class="na">util</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.nio.charset.Charset</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Helper class for reading and writing files.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileUtil</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The character set. UTF-8 works good for windows, mac and Umlaute.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Charset</span> <span class="n">CHARSET</span> <span class="o">=</span> <span class="n">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Reads the specified file and returns the content as a String.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param file</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  * @throws IOException thrown if an I/O error occurs opening the file</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">readFile</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuffer</span> <span class="n">stringBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedReader</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">toPath</span><span class="o">(),</span> <span class="n">CHARSET</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">stringBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">return</span> <span class="n">stringBuffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Saves the content String to the specified file.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param content</span>
</span><span class='line'><span class="cm">  * @param file</span>
</span><span class='line'><span class="cm">  * @throws IOException thrown if an I/O error occurs opening or creating the file</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">saveFile</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">,</span> <span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedWriter</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">toPath</span><span class="o">(),</span> <span class="n">CHARSET</span><span class="o">);</span>
</span><span class='line'>      <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">content</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>      <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using XStream</h3>

<p>To use XStream we need three libraries. Add the following libraries to the project&#8217;s <em>lib</em> folder and add them to the build path (right click on libraries).</p>

<ul>
<li><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-5/xstream-1.4.3.jar">xstream-1.4.3.jar</a> - XStream main library</li>
<li><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-5/xmlpull-1.1.3.1.jar">xmlpull-1.1.3.1.jar</a> - XmlPull to detect available parsers</li>
<li><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-5/xpp3_min-1.1.4c.jar">xpp3_min-1.1.4c.jar</a> - Xpp3, a fast pull parser</li>
</ul>


<p>You can also download the three libraries from the <a href="http://xstream.codehaus.org/download.html">XStream download page</a>.</p>

<p>We&#8217;ll make our <code>MainApp</code> class responsible for reading and writing the person data. Add the following two methods to the end of <code>MainApp.java</code>:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Loads person data from the specified file. The current person data will</span>
</span><span class='line'><span class="cm"> * be replaced.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param file</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">loadPersonDataFromFile</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">XStream</span> <span class="n">xstream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XStream</span><span class="o">();</span>
</span><span class='line'>  <span class="n">xstream</span><span class="o">.</span><span class="na">alias</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">,</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">xml</span> <span class="o">=</span> <span class="n">FileUtil</span><span class="o">.</span><span class="na">readFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personList</span> <span class="o">=</span> <span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;)</span> <span class="n">xstream</span><span class="o">.</span><span class="na">fromXML</span><span class="o">(</span><span class="n">xml</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">personData</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="n">personData</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">personList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setPersonFilePath</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// catches ANY exception</span>
</span><span class='line'>    <span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">primaryStage</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Could not load data from file:\n&quot;</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;Could not load data&quot;</span><span class="o">,</span> <span class="s">&quot;Error&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Saves the current person data to the specified file.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param file</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">savePersonDataToFile</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">XStream</span> <span class="n">xstream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XStream</span><span class="o">();</span>
</span><span class='line'>  <span class="n">xstream</span><span class="o">.</span><span class="na">alias</span><span class="o">(</span><span class="s">&quot;person&quot;</span><span class="o">,</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Convert ObservableList to a normal ArrayList</span>
</span><span class='line'>  <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">personData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">xml</span> <span class="o">=</span> <span class="n">xstream</span><span class="o">.</span><span class="na">toXML</span><span class="o">(</span><span class="n">personList</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">FileUtil</span><span class="o">.</span><span class="na">saveFile</span><span class="o">(</span><span class="n">xml</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setPersonFilePath</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// catches ANY exception</span>
</span><span class='line'>    <span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">primaryStage</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Could not save data to file:\n&quot;</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;Could not save data&quot;</span><span class="o">,</span> <span class="s">&quot;Error&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The save method uses <code>xstream.toXML(...)</code> to convert the list of <code>Person</code> objects into an XML representation. The load method uses <code>xstream.fromXML(...)</code> to convert the xml data back to a list of <code>Person</code>s.</p>

<p>If anything goes wrong, an error dialog is presented to the user.</p>

<h2>Handling Menu Actions</h2>

<p>In our <code>RootLayout.fxml</code> there is already a menu, but we haven&#8217;t used it yet. Before we add action to the menu we&#8217;ll first create all menu items.</p>

<p>Open the <code>RootLayout.fxml</code> file in Scene Builder and drag the necessary menu items from the <em>library view</em> to the menu bar in the <em>hierarchy view</em>. Create a <strong>New</strong>, <strong>Open&#8230;</strong>, <strong>Save</strong>, <strong>Save As&#8230;</strong>, and <strong>Exit</strong> menu item. You may also use separators between some items.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-5/addressapp02.png"></p>

<p>Hint: Using the <em>Accelerator</em> setting under properties you can set shortcut keys to menu items.</p>

<h3>The RootLayoutController</h3>

<p>For handling menu actions we&#8217;ll need a new controller class. Create a class <code>RootLayoutController</code> inside the controller package <code>ch.makery.address</code>.</p>

<p>Add the following content to the controller:</p>

<figure class='code'><figcaption><span> (RootLayoutController.java)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-5/RootLayoutController.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.Dialogs</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.stage.FileChooser</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The controller for the root layout. The root layout provides the basic</span>
</span><span class='line'><span class="cm"> * application layout containing a menu bar and space where other JavaFX</span>
</span><span class='line'><span class="cm"> * elements can be placed.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author Marco Jakob</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RootLayoutController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Reference to the main application</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">MainApp</span> <span class="n">mainApp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Is called by the main application to give a reference back to itself.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param mainApp</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMainApp</span><span class="o">(</span><span class="n">MainApp</span> <span class="n">mainApp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mainApp</span> <span class="o">=</span> <span class="n">mainApp</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Creates an empty address book.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleNew</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mainApp</span><span class="o">.</span><span class="na">getPersonData</span><span class="o">().</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mainApp</span><span class="o">.</span><span class="na">setPersonFilePath</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Opens a FileChooser to let the user select an address book to load.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleOpen</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">FileChooser</span> <span class="n">fileChooser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileChooser</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Set extension filter</span>
</span><span class='line'>      <span class="n">FileChooser</span><span class="o">.</span><span class="na">ExtensionFilter</span> <span class="n">extFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileChooser</span><span class="o">.</span><span class="na">ExtensionFilter</span><span class="o">(</span>
</span><span class='line'>              <span class="s">&quot;XML files (*.xml)&quot;</span><span class="o">,</span> <span class="s">&quot;*.xml&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">fileChooser</span><span class="o">.</span><span class="na">getExtensionFilters</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">extFilter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Show save file dialog</span>
</span><span class='line'>      <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">fileChooser</span><span class="o">.</span><span class="na">showOpenDialog</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPrimaryStage</span><span class="o">());</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">file</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mainApp</span><span class="o">.</span><span class="na">loadPersonDataFromFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Saves the file to the person file that is currently open. If there is no</span>
</span><span class='line'><span class="cm">  * open file, the &quot;save as&quot; dialog is shown.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleSave</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">File</span> <span class="n">personFile</span> <span class="o">=</span> <span class="n">mainApp</span><span class="o">.</span><span class="na">getPersonFilePath</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">personFile</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mainApp</span><span class="o">.</span><span class="na">savePersonDataToFile</span><span class="o">(</span><span class="n">personFile</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">handleSaveAs</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Opens a FileChooser to let the user select a file to save to.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleSaveAs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">FileChooser</span> <span class="n">fileChooser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileChooser</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set extension filter</span>
</span><span class='line'>      <span class="n">FileChooser</span><span class="o">.</span><span class="na">ExtensionFilter</span> <span class="n">extFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileChooser</span><span class="o">.</span><span class="na">ExtensionFilter</span><span class="o">(</span>
</span><span class='line'>              <span class="s">&quot;XML files (*.xml)&quot;</span><span class="o">,</span> <span class="s">&quot;*.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">fileChooser</span><span class="o">.</span><span class="na">getExtensionFilters</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">extFilter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Show save file dialog</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">fileChooser</span><span class="o">.</span><span class="na">showSaveDialog</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPrimaryStage</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">file</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Make sure it has the correct extension</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;.xml&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getPath</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;.xml&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">mainApp</span><span class="o">.</span><span class="na">savePersonDataToFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Opens an about dialog.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleAbout</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Dialogs</span><span class="o">.</span><span class="na">showInformationDialog</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPrimaryStage</span><span class="o">(),</span> <span class="s">&quot;Author: Marco Jakob\nWebsite: http://edu.makery.ch&quot;</span><span class="o">,</span> <span class="s">&quot;AddressApp&quot;</span><span class="o">,</span> <span class="s">&quot;About&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Closes the application.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleExit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller contains an <code>@FXML</code> method for each menu item.</p>

<h4>FileChooser</h4>

<p>Take note of the methods that use the <code>FileChooser</code> class inside <code>RootLayoutController</code> above. First, a new object of the class <code>FileChooser</code> is created. Then, an extension filter is added so that only files ending in <code>.xml</code> are displayed. Finally, the file chooser is displayed on top of the primary stage.</p>

<p>If the user closes the dialog without choosing a file, <code>null</code> is returned. Otherwise, we get the selected file and we can pass it to the <code>loadPersonDataFromFile(...)</code> or <code>savePersonDataToFile(...)</code> method of <code>MainApp</code>.</p>

<h3>Connecting the fxml View to the Controller</h3>

<ol>
<li><p>Open <code>RootLayout.fxml</code> in Scene Builder. Select the root <code>BorderPane</code>. In the Code view select the <code>RootLayoutController</code> as Controller class.</p></li>
<li><p>Select each menu item in the Hierarchy view. In the Code view under <em>On Action</em> you should see a choice of all the <code>@FXML</code> methods of the controller. Choose the corresponding method for each menu item. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-5/addressapp03.png"> <br/>
<em>If you don&#8217;t see the choices in On Action</em>: Because of a <a href="http://javafx-jira.kenai.com/browse/DTL-5402">bug</a> in Scene Builder you have to remove the controller from the root, hit enter, and add it again. I had to do this after every restart of Scene Builder! (<strong>fixed in Scene Builder 1.1 beta 17 and above!</strong>)</p></li>
<li><p>Close Scene Builder and hit <strong>Refresh (F5)</strong> on your project&#8217;s root folder. This will make Eclipse aware of the changes you made in Scene Builder.</p></li>
</ol>


<h3>Connecting the MainApp and RootLayoutController</h3>

<p>In several places, the <code>RootLayoutController</code> needs a reference back to the <code>MainApp</code>. We haven&#8217;t passed the reference to the <code>RootLayoutController</code> yet.</p>

<p>So, open the <code>MainApp</code> class and replace the <code>start(...)</code> method with the following code:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span> <span class="o">=</span> <span class="n">primaryStage</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;AddressApp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span><span class="o">.</span><span class="na">getIcons</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Image</span><span class="o">(</span><span class="s">&quot;file:resources/images/address_book_32.png&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Load the root layout from the fxml file</span>
</span><span class='line'>    <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/RootLayout.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">rootLayout</span> <span class="o">=</span> <span class="o">(</span><span class="n">BorderPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">rootLayout</span><span class="o">);</span>
</span><span class='line'>    <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Give the controller access to the main app</span>
</span><span class='line'>    <span class="n">RootLayoutController</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">getController</span><span class="o">();</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">setMainApp</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">showPersonOverview</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Try to load last opened person file</span>
</span><span class='line'>  <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">getPersonFilePath</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">file</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">loadPersonDataFromFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the two changes: The lines that <em>give the controller access to the main app</em> and the last three lines to <em>load the last opened person file</em>.</p>

<h2>How It Works</h2>

<p>Doing a test drive of your application you should be able to use the menus to save the person data to a file and load it again. After a restart, it should automatically load the last used file.</p>

<p>Let&#8217;s see how it all works together:</p>

<ol>
<li>The application is started using the <code>main(...)</code> method inside <code>MainApp</code>.</li>
<li>The constructor <code>public MainApp()</code> is called and adds some sample data.</li>
<li><code>MainApp</code>s <code>start(...)</code> method is called and initializes the root layout from <code>RootLayout.fxml</code>. The fxml file has the information about which controller to use and links the view to its <code>RootLayoutController</code>.</li>
<li>The <code>MainApp</code> gets the <code>RootLayoutController</code> from the fxml loader and passes a reference to itself to the controller. With this reference the controller can later access the (public) methods of <code>MainApp</code>.</li>
<li>At the end of the <code>start(...)</code> method we try to get the <em>last opened person file</em> from <code>Preferences</code>. If the <code>Preferences</code> know about such an XML file, we&#8217;ll load the data from this XML file. This will apparently overwrite the sample data from the constructor.</li>
</ol>


<hr />

<h3>What&#8217;s Next?</h3>

<p>In Tutorial <a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI</a> we&#8217;ll add a birthday statistics chart.</p>

<h3>Download</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-5/addressapp-part-5.zip">Source of Tutorial Part V</a> as Eclipse Project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part IV - CSS Styling]]></title>
    <link href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4/"/>
    <updated>2012-11-26T13:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp01.png"></p>

<h2>Topics in Part IV</h2>

<ul>
<li><strong>CSS Styling</strong></li>
<li>Adding an <strong>Application Icon</strong></li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><a href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1">Part I - Scene Builder</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Part II - Model and TableView</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Part III - Interacting with the User</a></li>
<li><strong>Part IV - CSS Styling</strong></li>
<li><a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V - Storing Data as XML</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI - Statistics Chart</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII - Deployment with e(fx)clipse</a></li>
</ul>


<h2>CSS Styling</h2>

<p>In JavaFX you can style your user interface using Cascading Style Sheets (CSS). This is great! It&#8217;s never been as easy to customize the appearance of a Java application.</p>

<p>In this tutorial we will create a <em>DarkTheme</em> inspired by the Windows 8 Metro design. The css for the buttons is based on the blog post <a href="http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/">JMetro - Windows 8 Metro controls on Java</a> by Pedro Duque Vieira.</p>

<h3>Getting Familiar with CSS</h3>

<p>If you want to style your JavaFX application you should have a basic understanding of CSS in general. A good place to start is this <a href="http://www.csstutorial.net/">CSS tutorial</a>.</p>

<p>For more JavaFX specific information about CSS:</p>

<ul>
<li><a href="http://docs.oracle.com/javafx/2/css_tutorial/jfxpub-css_tutorial.htm">Skinning JavaFX Applications with CSS</a> - Tutorial by Oracle</li>
<li><a href="http://docs.oracle.com/cd/E17802_01/javafx/javafx/1.3/docs/api/javafx.scene/doc-files/cssref.html">JavaFX CSS Reference</a> - Official Reference</li>
</ul>


<h3>Default JavaFX CSS</h3>

<p>The default source for CSS styles is a file called <strong><code>caspian.css</code></strong>. This css file can be found in the Java FX jar file <code>jfxrt.jar</code> located in your Java folder under <code>/jdk_x.x.x/jre/lib/jfxrt.jar</code>.</p>

<p>This default style sheet is always applied to a JavaFX application. By adding a custom style sheet we can override the default styles of the <code>caspian.css</code>. <br/>
Hint: It helps to look at the default CSS file to see which styles you might need to override.</p>

<h3>Attaching CSS Style Sheets</h3>

<p>Add the following CSS file called <code>DarkTheme.css</code> to the <em>view</em> package.</p>

<figure class='code'><figcaption><span> (DarkTheme.css)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-4/DarkTheme.css'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='css'><span class='line'><span class="nc">.background</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.label</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">11pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI Semibold&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.label-bright</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">11pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI Semibold&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.label-header</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">32pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI Light&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.table-view</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">control</span><span class="o">-</span><span class="n">inner</span><span class="o">-</span><span class="k">background</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">table-cell</span><span class="o">-</span><span class="k">border-color</span><span class="o">:</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">table</span><span class="o">-</span><span class="n">header</span><span class="o">-</span><span class="k">border-color</span><span class="o">:</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">padding</span><span class="o">:</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.table-view</span> <span class="nc">.column-header-background</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.table-view</span> <span class="nc">.column-header</span><span class="o">,</span> <span class="nc">.table-view</span> <span class="nc">.filler</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">35</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-width</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">1</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-color</span><span class="o">:</span>
</span><span class='line'>        <span class="k">transparent</span>
</span><span class='line'>        <span class="k">transparent</span>
</span><span class='line'>        <span class="n">derive</span><span class="p">(</span><span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">base</span><span class="o">,</span> <span class="m">80</span><span class="o">%</span><span class="p">)</span>
</span><span class='line'>        <span class="k">transparent</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">insets</span><span class="o">:</span> <span class="m">0</span> <span class="m">10</span> <span class="m">1</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.table-view</span> <span class="nc">.column-header</span> <span class="nc">.label</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">20pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI Light&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">alignment</span><span class="o">:</span> <span class="k">center-left</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.table-view</span><span class="nd">:focused</span> <span class="nc">.table-row-cell</span><span class="nd">:filled:focused:selected</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">focus</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.split-pane</span><span class="nd">:horizontal</span> <span class="o">&gt;</span> <span class="o">*</span> <span class="o">&gt;</span> <span class="nc">.split-pane-divider</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-color</span><span class="o">:</span> <span class="k">transparent</span> <span class="m">#1d1d1d</span> <span class="k">transparent</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="k">transparent</span><span class="o">,</span> <span class="n">derive</span><span class="p">(</span><span class="m">#1d1d1d</span><span class="o">,</span><span class="m">20</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.split-pane</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">padding</span><span class="o">:</span> <span class="m">1</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.menu-bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="n">derive</span><span class="p">(</span><span class="m">#1d1d1d</span><span class="o">,</span><span class="m">20</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">selection</span><span class="o">-</span><span class="n">bar</span><span class="o">:</span> <span class="n">derive</span><span class="p">(</span><span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background</span><span class="o">,-</span><span class="m">7</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.menu-bar</span> <span class="nc">.label</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">14pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI Light&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">9</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.text-field</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">12pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI Semibold&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">/* </span>
</span><span class='line'><span class="c"> * Metro style Push Button</span>
</span><span class='line'><span class="c"> * Author: Pedro Duque Vieira</span>
</span><span class='line'><span class="c"> * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/</span>
</span><span class='line'><span class="c"> */</span>
</span><span class='line'><span class="nc">.button</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">padding</span><span class="o">:</span> <span class="m">5</span> <span class="m">22</span> <span class="m">5</span> <span class="m">22</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-color</span><span class="o">:</span> <span class="m">#e2e2e2</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-width</span><span class="o">:</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-family</span><span class="o">:</span> <span class="s2">&quot;Segoe UI&quot;</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">font-size</span><span class="o">:</span> <span class="m">11pt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="m">#d8d8d8</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background</span><span class="o">-</span><span class="n">insets</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">1</span><span class="o">,</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.button</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#3a3a3a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.button</span><span class="nd">:pressed</span><span class="o">,</span> <span class="nc">.button</span><span class="nd">:default:hover:pressed</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.button</span><span class="nd">:focused</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-color</span><span class="o">:</span> <span class="nb">white</span><span class="o">,</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-width</span><span class="o">:</span> <span class="m">1</span><span class="o">,</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border-style</span><span class="o">:</span> <span class="k">solid</span><span class="o">,</span> <span class="n">segments</span><span class="p">(</span><span class="m">1</span><span class="o">,</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">insets</span><span class="o">:</span> <span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="m">1</span><span class="o">,</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.button</span><span class="nd">:disabled</span><span class="o">,</span> <span class="nc">.button</span><span class="nd">:default:disabled</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">4</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#1d1d1d</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.button</span><span class="nd">:default</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">focus</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">text</span><span class="o">-</span><span class="n">fill</span><span class="o">:</span> <span class="m">#ffffff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.button</span><span class="nd">:default:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="k">background-color</span><span class="o">:</span> <span class="n">derive</span><span class="p">(</span><span class="o">-</span><span class="n">fx</span><span class="o">-</span><span class="n">focus</span><span class="o">-</span><span class="k">color</span><span class="o">,</span><span class="m">30</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now need to attach the CSS to our Scene. We could do this programmatically in Java code, but we&#8217;ll use the Scene Builder to add it to our fxml files:</p>

<h4>Attach CSS to RootLayout.fxml</h4>

<p>Open the file <code>RootLayout.fxml</code> in Scene Builder. Select the root <code>BorderPane</code> in the Hierarchy view. Under properties add the <code>DarkTheme.css</code> file as stylesheet.</p>

<h4>Attach CSS to PersonEditDialog.fxml</h4>

<p>Open the file <code>PersonEditDialog.fxml</code> in Scene Builder. Select the root <code>AnchorPane</code> and choose <code>DarkTheme.css</code> in the properties view as stylesheet.</p>

<p>The background is still white, so add the Style Class <code>background</code> to the root <code>AnchorPane</code>.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp02.png"></p>

<p>Select the OK button and choose <em>Default Button</em> in the Properties View. This will change its color and make this the default button when the <em>enter</em> key is pressed by the user.</p>

<h4>Attach CSS to PersonOverview.fxml</h4>

<p>Open the file <code>PersonOverview.fxml</code> in Scene Builder. Select the root <code>AnchorPane</code> in the Hierarchy view. Under properties add the <code>DarkTheme.css</code> file as stylesheet.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp03.png"></p>

<p>You should already see some changes now: The table and the buttons are black. If you select a button and look at the CSS part in the Properties view you will see that there already is a default style class called <code>button</code>.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp04.png"></p>

<p>All class styles <code>.button</code> from <code>caspian.css</code> apply to those buttons. Since we&#8217;ve redefined (and thus overridden) some of those styles in our custom CSS, the appearance of the buttons change automatically.</p>

<p>You might need to adjust the size of the buttons so that all text is displayed.</p>

<p>Select the right <code>AnchorPane</code> that is inside the <code>SplitPane</code>. Go to the Properties view and use the plus (+) sign to add a Style Class. Select the <code>background</code> style class. The background should now turn black.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp05.png">
<img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp06.png"></p>

<p>If there is a white border around the table, select the <code>TableView</code> and choose 0 for all anchors in the Layout view. Now the table should take up all the left space.</p>

<h4>Labels with different style</h4>

<p>Right now, all the labels on the right side have the same size. There are already some styles defined in the css file called <code>.label-header</code> and <code>.label-bright</code> that we&#8217;ll use to further style the labels.</p>

<p>Select the <em>Person Details</em> label and add <code>label-header</code> as a Style Class.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp07.png"></p>

<p>To each label in the right column (where the actual person details are displayed), add the css Style Class <code>label-bright</code>.</p>

<h2>Adding an Application Icon</h2>

<p>Right now our application just has the default icon in the title bar and taks bar:</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp08.png"></p>

<p>It looks much nicer with a custom icon:</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp09.png"></p>

<h3>The Icon File</h3>

<p>A possible place to get free icons is <a href="http://www.iconfinder.com">Icon Finder</a>. I downloaded a little <a href="http://www.iconfinder.com/icondetails/86957/32/">address book icon</a>.</p>

<p>Create a (normal) folder inside your AddressApp project called <strong>resources</strong> and a subfolder called <strong>images</strong> in it. Put the icon of your choice inside the images folder. Your folder structure should look something like this now:</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-4/addressapp10.png"></p>

<h3>Set Icon to Scene</h3>

<p>To set the icon for our scene add the following line to the <code>start(...)</code> method in <code>MainApp.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span><span class="o">.</span><span class="na">getIcons</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Image</span><span class="o">(</span><span class="s">&quot;file:resources/images/address_book_32.png&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whole <code>start(...)</code> method will look something like this now:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span> <span class="o">=</span> <span class="n">primaryStage</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;AddressApp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// Set the application icon</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span><span class="o">.</span><span class="na">getIcons</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Image</span><span class="o">(</span><span class="s">&quot;file:resources/images/address_book_32.png&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Load the root layout from the fxml file</span>
</span><span class='line'>    <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/RootLayout.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">rootLayout</span> <span class="o">=</span> <span class="o">(</span><span class="n">BorderPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">rootLayout</span><span class="o">);</span>
</span><span class='line'>    <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>    <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">showPersonOverview</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also add an icon to the stage of the person edit dialog, of course.</p>

<hr />

<h3>What&#8217;s Next?</h3>

<p>In <a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Tutorial Part V</a> we will add XML storage for our data.</p>

<h3>Download</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-4/addressapp-part-4.zip">Source of Tutorial Part IV</a> as Eclipse Project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part III - Interacting with the User]]></title>
    <link href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3/"/>
    <updated>2012-11-20T17:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-3/addressapp01.png"></p>

<h2>Topics in Part III</h2>

<ul>
<li><strong>React to selection changes</strong> in the table.</li>
<li>Add functionality to the <strong>add</strong>, <strong>edit</strong>, and <strong>remove</strong> buttons.</li>
<li>Create a custom <strong>popup dialog</strong> to edit a person.</li>
<li><strong>Validating user input</strong>.</li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><a href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1">Part I - Scene Builder</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Part II - Model and TableView</a></li>
<li><strong>Part III - Interacting with the User</strong></li>
<li><a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Part IV - CSS Styling</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V - Storing Data as XML</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI - Statistics Chart</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII - Deployment with e(fx)clipse</a></li>
</ul>


<h2>React to Table Selections</h2>

<p>Obviousely, we haven&#8217;t used the right side of our application, yet. The idea is when the user selects a person in the table, the details about that person should be displayed on the right side.</p>

<p>First, let&#8217;s add a new method inside <code>PersonOverviewController</code> that helps us fill the labels with the data from a single <code>Person</code>.</p>

<p>Create a method called <code>showPersonDetails(Person person)</code>. Go trough all the labels and set the text using <code>setText(...)</code> with details from the person. If <code>null</code> is passed as parameter, all labels should be cleared.</p>

<figure class='code'><figcaption><span>PersonOverviewController.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Fills all text fields to show details about the person.</span>
</span><span class='line'><span class="cm"> * If the specified person is null, all text fields are cleared.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param person the person or null</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">showPersonDetails</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use setText(...) on all labels with info from the person object</span>
</span><span class='line'><span class="c1">// use setText(&quot;&quot;) on all labels if the person is null</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Convert the Birthday Date to a String</h3>

<p>If you&#8217;ve implemented the method above, you will have noticed that we need a way to convert the <code>Calendar</code> from the birthday field to a String. In a <code>Label</code> we can only display Strings.</p>

<p>We will use the conversion from <code>Calendar</code> and <code>String</code> (and vice versa) in several places. It&#8217;s good practice to create a helper class with <code>static</code> methods for this. We&#8217;ll call it <code>CalendarUtil</code> and place it in a seperate package called <code>ch.makery.address.util</code>:</p>

<figure class='code'><figcaption><span> (CalendarUtil.java)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-3/CalendarUtil.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">.</span><span class="na">util</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.ParseException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.SimpleDateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Calendar</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Helper functions for handling dates.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalendarUtil</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Default date format in the form 2013-03-18.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SimpleDateFormat</span> <span class="n">DATE_FORMAT</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Returns the given date as a well formatted string. The above defined date</span>
</span><span class='line'><span class="cm">  * format is used.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param calendar date to be returned as a string</span>
</span><span class='line'><span class="cm">  * @return formatted string</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">format</span><span class="o">(</span><span class="n">Calendar</span> <span class="n">calendar</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">calendar</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">DATE_FORMAT</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">calendar</span><span class="o">.</span><span class="na">getTime</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Converts a String in the format &quot;yyyy-MM-dd&quot; to a Calendar object.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * Returns null if the String could not be converted.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param dateString the date as String</span>
</span><span class='line'><span class="cm">  * @return the calendar object or null if it could not be converted</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Calendar</span> <span class="nf">parse</span><span class="o">(</span><span class="n">String</span> <span class="n">dateString</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Calendar</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">result</span><span class="o">.</span><span class="na">setTime</span><span class="o">(</span><span class="n">DATE_FORMAT</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">dateString</span><span class="o">));</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Checks the String whether it is a valid date.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param dateString</span>
</span><span class='line'><span class="cm">  * @return true if the String is a valid date</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">validString</span><span class="o">(</span><span class="n">String</span> <span class="n">dateString</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">DATE_FORMAT</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">dateString</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can change the format of the date by changing the constant <code>DATE_FORMAT</code>. For all possible formats see <a href="http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"><code>SimpleDateFormat</code></a> in the Java API.</p>

<h3>Listen for Table Selection Changes</h3>

<p>To get informed when the user selects a person in the person table, we need to <em>listen for changes</em>.</p>

<p>If you&#8217;re not familiar with the concept of <em>anonymous classes</em> you might want to take a look at an <a href="http://openbook.galileocomputing.de/javainsel9/javainsel_08_001.htm#mj58cf4fadac5cc0924b9451626df2228c">explanation in German</a> or <a href="http://inheritingjava.blogspot.ch/2011/02/chapter-54-anonymous-inner-classes.html">English</a>.</p>

<p>There is an interface in JavaFX called <a href="http://docs.oracle.com/javafx/2/api/javafx/beans/value/ChangeListener.html"><code>ChangeListener</code></a> with one method called <code>changed(...)</code>. We need an <em>anonymous class</em> that implements this interface and add it to our person table. That sounds quite complicated. I&#8217;ll explain it, but first let&#8217;s take a look at the new code, added to the <code>initialize()</code> method in <code>PersonOverviewController</code>:</p>

<figure class='code'><figcaption><span>PersonOverviewController.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Initialize the person table</span>
</span><span class='line'>  <span class="n">firstNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;firstName&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">lastNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;lastName&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="c1">// Auto resize columns</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">setColumnResizePolicy</span><span class="o">(</span><span class="n">TableView</span><span class="o">.</span><span class="na">CONSTRAINED_RESIZE_POLICY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// clear person</span>
</span><span class='line'>  <span class="n">showPersonDetails</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Listen for selection changes</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">selectedItemProperty</span><span class="o">().</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChangeListener</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changed</span><span class="o">(</span><span class="n">ObservableValue</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Person</span><span class="o">&gt;</span> <span class="n">observable</span><span class="o">,</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">Person</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">showPersonDetails</span><span class="o">(</span><span class="n">newValue</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <strong>line 10</strong> we reset the person details. If you&#8217;ve implemented <code>showPersonDetails(...)</code> correctly this should set an empty String to all text fields.</p>

<p>In <strong>line 13</strong> we get the <em>selectedItemProperty</em> of the person table and add a listener to it. The new <code>ChangeListener</code> is of type <code>Person</code> since we have <code>Person</code> objects in the table. Now, whenever the user selects a person in the table, the method <code>changed(...)</code> is called. We take the newly selected person and pass it to the <code>showPersonDetails(...)</code> method.</p>

<p>Try to <strong>run your application</strong> at this point. Verify that when you select a person in the table, details about that person are displayed on the right.</p>

<p>If something doesn&#8217;t work, you can compare your <code>PersonOverviewController</code> class with <a href="http://edu.makery.ch/downloads/javafx-addressapp/part-3/PersonOverviewController.java">PersonOverviewController.java</a>.</p>

<h2>The Delete Button</h2>

<p>Our user interface already contains a delete button, but without any functionality. We can select the action for a button inside the <em>Scene Builder</em>. Any method inside our controller that is annotated with <code>@FXML</code> (or is public) is accessible by the <em>Scene Builder</em>. Thus, let&#8217;s first create the delete method at the end of our <code>PersonOverviewController</code> class:</p>

<figure class='code'><figcaption><span>PersonOverviewController.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Called when the user clicks on the delete button.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleDeletePerson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">selectedIndex</span> <span class="o">=</span> <span class="n">personTable</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">getSelectedIndex</span><span class="o">();</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">getItems</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">selectedIndex</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, open the <code>PersonOverview.fxml</code> file in <em>SceneBuilder</em>. Select the <em>Delete</em> button, open the <em>Code</em> view and choose <code>#handleDeletePerson</code> in the dropdown of <strong>On Action</strong>.</p>

<p><em>Scene Builder Problem</em> (<strong>fixed in Scene Builder 1.1 beta 17 and above!</strong>): In my version of Scene Builder (1.1 beta_11) the methods did not appear. I had to go to the root AnchorPane (in Hierarchy view), delete the controller class, hit enter and add the controller class again. Now, the methods appear in the dropdown. Hope <a href="http://javafx-jira.kenai.com/browse/DTL-5402">this bug</a> will be corrected soon.</p>

<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-3/addressapp02.png"></p>

<h3>Error Handling</h3>

<p>If you run the application at this point, you should be able to delete selected persons from the table. But what happenes, if you <strong>click the delete button if no person is selected</strong> in the table?</p>

<p>There will be an <code>ArrayIndexOutOfBoundsException</code> because it could not remove a person item at index <code>-1</code>. The index <code>-1</code> was returned by <code>getSelectedIndex()</code> which means that there was no selection.</p>

<p>To ignore such an error is not very nice, of course. We should let the user know that he/she must select a person before deleting. Even better would be if we disabled the button so that the user doesn&#8217;t even have the chance to do something wrong. I&#8217;ll show how to do the first approach here.</p>

<p>We&#8217;ll add a popup dialog to inform the user. You&#8217;ll need to <strong>add a library</strong> for the Dialogs:</p>

<ol>
<li>Download the newest <strong>javafx-dialogs-x.x.x.jar</strong> file from my <a href="https://github.com/marcojakob/javafx-ui-sandbox/tree/master/javafx-dialogs/dist">GitHub Page</a>.</li>
<li>Create a <strong>lib</strong> subfolder in the project and add the jar file to this folder.</li>
<li>Add the jar file to the project&#8217;s classpath: In Eclipse <em>right-click on the jar file | Build Path | Add to Build Path</em>.</li>
</ol>


<p>With some changes made to the <code>handleDeletePerson()</code> method, we can show a popup dialog whenever the user pushes the delete button while no person is selected in the table:</p>

<figure class='code'><figcaption><span>PersonOverviewController.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Called when the user clicks on the delete button.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleDeletePerson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">selectedIndex</span> <span class="o">=</span> <span class="n">personTable</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">getSelectedIndex</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">selectedIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">personTable</span><span class="o">.</span><span class="na">getItems</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">selectedIndex</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Nothing selected</span>
</span><span class='line'>    <span class="n">Dialogs</span><span class="o">.</span><span class="na">showWarningDialog</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPrimaryStage</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;Please select a person in the table.&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;No Person Selected&quot;</span><span class="o">,</span> <span class="s">&quot;No Selection&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The New and Edit Buttons</h2>

<p>The new and edit buttons are a bit more work: We&#8217;ll need a new custom dialog (a.k.a stage) with a form to ask the user for details about the person.</p>

<ol>
<li>Create a new fxml file called <code>PersonEditDialog.fxml</code> inside the view package.</li>
<li><p>Use a <code>GridPane</code>, <code>Label</code>s, <code>TextBoxe</code>s and <code>Button</code>s to create a Dialog like the following: <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-3/addressapp03.png"> <br/>
If you don&#8217;t to do the work, you can download this <a href="http://edu.makery.ch/downloads/javafx-addressapp/part-3/PersonEditDialog.fxml">PersonEditDialog.fxml</a>.</p></li>
<li><p>Create the controller <code>PersonEditDialogController</code>:</p></li>
</ol>


<figure class='code'><figcaption><span> (PersonEditDialogController.java)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-3/PersonEditDialogController.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.Dialogs</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.control.TextField</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ch.makery.address.model.Person</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">ch.makery.address.util.CalendarUtil</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Dialog to edit details of a person.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author Marco Jakob</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonEditDialogController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">firstNameField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">lastNameField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">streetField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">postalCodeField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">cityField</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TextField</span> <span class="n">birthdayField</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Stage</span> <span class="n">dialogStage</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Person</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">okClicked</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Initializes the controller class. This method is automatically called</span>
</span><span class='line'><span class="cm">  * after the fxml file has been loaded.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Sets the stage of this dialog.</span>
</span><span class='line'><span class="cm">  * @param dialogStage</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDialogStage</span><span class="o">(</span><span class="n">Stage</span> <span class="n">dialogStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">dialogStage</span> <span class="o">=</span> <span class="n">dialogStage</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Sets the person to be edited in the dialog.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param person</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPerson</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">person</span> <span class="o">=</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">firstNameField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">());</span>
</span><span class='line'>      <span class="n">lastNameField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getLastName</span><span class="o">());</span>
</span><span class='line'>      <span class="n">streetField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getStreet</span><span class="o">());</span>
</span><span class='line'>      <span class="n">postalCodeField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getPostalCode</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">cityField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getCity</span><span class="o">());</span>
</span><span class='line'>      <span class="n">birthdayField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">CalendarUtil</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getBirthday</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">birthdayField</span><span class="o">.</span><span class="na">setPromptText</span><span class="o">(</span><span class="s">&quot;yyyy-mm-dd&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Returns true if the user clicked OK, false otherwise.</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isOkClicked</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">okClicked</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Called when the user clicks ok.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleOk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">isInputValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="na">setPostalCode</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">()));</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="na">setBirthday</span><span class="o">(</span><span class="n">CalendarUtil</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">birthdayField</span><span class="o">.</span><span class="na">getText</span><span class="o">()));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">okClicked</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="n">dialogStage</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Called when the user clicks cancel.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleCancel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">dialogStage</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Validates the user input in the text fields.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @return true if the input is valid</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isInputValid</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">errorMessage</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">firstNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid first name!\n&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">lastNameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid last name!\n&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">streetField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid street!\n&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid postal code!\n&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// try to parse the postal code into an int</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">postalCodeField</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid postal code (must be an integer)!\n&quot;</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">cityField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid city!\n&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">birthdayField</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">birthdayField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid birthday!\n&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">CalendarUtil</span><span class="o">.</span><span class="na">validString</span><span class="o">(</span><span class="n">birthdayField</span><span class="o">.</span><span class="na">getText</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">errorMessage</span> <span class="o">+=</span> <span class="s">&quot;No valid birthday. Use the format yyyy-mm-dd!\n&quot;</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">errorMessage</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Show the error message</span>
</span><span class='line'>          <span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">dialogStage</span><span class="o">,</span> <span class="n">errorMessage</span><span class="o">,</span>
</span><span class='line'>                  <span class="s">&quot;Please correct invalid fields&quot;</span><span class="o">,</span> <span class="s">&quot;Invalid Fields&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>A few things to note about this controller:

<ul>
<li>The <code>setPerson(...)</code> method can be called from another class to set the person that is to be edited.</li>
<li>When the user clicks the OK butten, the <code>handleOk()</code> method is called. First, some validation is done by calling the <code>isInputValid()</code> method. Only if validation was successful, the person object is filled with the data that the user entered. Those changes will directly be applied to the person object that was passed to <code>setPerson(...)</code>!</li>
<li>The boolean <code>okClicked</code> is used so that the caller can determine whether the user clicked the OK or Cancel button.</li>
</ul>
</li>
</ul>


<h3>Opening the Dialog</h3>

<p>Add a method to load and display the edit person dialog inside our <code>MainApp</code>:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Opens a dialog to edit details for the specified person. If the user</span>
</span><span class='line'><span class="cm"> * clicks OK, the changes are saved into the provided person object and</span>
</span><span class='line'><span class="cm"> * true is returned.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @param person the person object to be edited</span>
</span><span class='line'><span class="cm"> * @return true if the user clicked OK, false otherwise.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">showPersonEditDialog</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Load the fxml file and create a new stage for the popup</span>
</span><span class='line'>    <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/PersonEditDialog.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">AnchorPane</span> <span class="n">page</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnchorPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Stage</span> <span class="n">dialogStage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stage</span><span class="o">();</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;Edit Person&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">initModality</span><span class="o">(</span><span class="n">Modality</span><span class="o">.</span><span class="na">WINDOW_MODAL</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">initOwner</span><span class="o">(</span><span class="n">primaryStage</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the person into the controller</span>
</span><span class='line'>    <span class="n">PersonEditDialogController</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">getController</span><span class="o">();</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">setDialogStage</span><span class="o">(</span><span class="n">dialogStage</span><span class="o">);</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">setPerson</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Show the dialog and wait until the user closes it</span>
</span><span class='line'>    <span class="n">dialogStage</span><span class="o">.</span><span class="na">showAndWait</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span><span class="o">.</span><span class="na">isOkClicked</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following methods to the <code>PersonOverviewController</code>:</p>

<figure class='code'><figcaption><span>PersonOverviewController.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Called when the user clicks the new button.</span>
</span><span class='line'><span class="cm"> * Opens a dialog to edit details for a new person.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleNewPerson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">tempPerson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">okClicked</span> <span class="o">=</span> <span class="n">mainApp</span><span class="o">.</span><span class="na">showPersonEditDialog</span><span class="o">(</span><span class="n">tempPerson</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">okClicked</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mainApp</span><span class="o">.</span><span class="na">getPersonData</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">tempPerson</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Called when the user clicks the edit button.</span>
</span><span class='line'><span class="cm"> * Opens a dialog to edit details for the selected person.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FXML</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleEditPerson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">selectedPerson</span> <span class="o">=</span> <span class="n">personTable</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">getSelectedItem</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">selectedPerson</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">okClicked</span> <span class="o">=</span> <span class="n">mainApp</span><span class="o">.</span><span class="na">showPersonEditDialog</span><span class="o">(</span><span class="n">selectedPerson</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">okClicked</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">refreshPersonTable</span><span class="o">();</span>
</span><span class='line'>      <span class="n">showPersonDetails</span><span class="o">(</span><span class="n">selectedPerson</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Nothing selected</span>
</span><span class='line'>    <span class="n">Dialogs</span><span class="o">.</span><span class="na">showWarningDialog</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPrimaryStage</span><span class="o">(),</span>
</span><span class='line'>        <span class="s">&quot;Please select a person in the table.&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;No Person Selected&quot;</span><span class="o">,</span> <span class="s">&quot;No Selection&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Refreshes the table. This is only necessary if an item that is already in</span>
</span><span class='line'><span class="cm"> * the table is changed. New and deleted items are refreshed automatically.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * This is a workaround because otherwise we would need to use property</span>
</span><span class='line'><span class="cm"> * bindings in the model class and add a *property() method for each</span>
</span><span class='line'><span class="cm"> * property. Maybe this will not be necessary in future versions of JavaFX</span>
</span><span class='line'><span class="cm"> * (see http://javafx-jira.kenai.com/browse/RT-22599)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">refreshPersonTable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">selectedIndex</span> <span class="o">=</span> <span class="n">personTable</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">getSelectedIndex</span><span class="o">();</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">layout</span><span class="o">();</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPersonData</span><span class="o">());</span>
</span><span class='line'>  <span class="c1">// Must set the selected index again (see http://javafx-jira.kenai.com/browse/RT-26291)</span>
</span><span class='line'>  <span class="n">personTable</span><span class="o">.</span><span class="na">getSelectionModel</span><span class="o">().</span><span class="na">select</span><span class="o">(</span><span class="n">selectedIndex</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Open the <code>PersonOverview.fxml</code> file in Scene Builder. Choose the corresponding methods in <em>On Action</em> for the new and edit buttons.</p>

<h2>Done!</h2>

<p>You should have a working <em>Address Application</em> now. The application is able to add, edit, and delete persons. There is even some validation for the text fields to avoid bad user entries.</p>

<p>I hope the concepts and structure of this application will get you started with writing your own JavaFX application! Have fun and stay tuned for possible future tutorials.</p>

<hr />

<h3>What&#8217;s Next?</h3>

<p>In <a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Tutorial Part IV</a> we will add some CSS styling.</p>

<h3>Download</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-3/addressapp-part-3.zip">Source of Tutorial Part III</a> as Eclipse Project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part II - Model and TableView]]></title>
    <link href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2/"/>
    <updated>2012-11-17T00:30:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-2/addressapp01.png"></p>

<h2>Topics in Part II</h2>

<ul>
<li>Creating a <strong>model</strong> class</li>
<li>Using the model class in an <strong>ObservableList</strong></li>
<li>Show data in the <strong>TableView</strong> using <strong>Controllers</strong></li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><a href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1">Part I - Scene Builder</a></li>
<li><strong>Part II - Model and TableView</strong></li>
<li><a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Part III - Interacting with the User</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Part IV - CSS Styling</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V - Storing Data as XML</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI - Statistics Chart</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII - Deployment with e(fx)clipse</a></li>
</ul>


<h2>Create the Model Class</h2>

<p>We need a model class to hold information about the people in our address book. Add a new class to the model package (<code>ch.makery.address.model</code>) called <code>Person</code>. This makes sense, since we want to manage people and their addresses. The <code>Person</code> class will have a few instance variables for the name, address and birthday. Add the following code to the class:</p>

<figure class='code'><figcaption><span> (Person.java)</span> <a href='http://edu.makery.ch/downloads/javafx-addressapp/part-2/Person.java'>download</a></figcaption>
 <div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Calendar</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Model class for a Person.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Marco Jakob</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">postalCode</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Calendar</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Default constructor.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Constructor with some initial data.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param firstName</span>
</span><span class='line'><span class="cm">  * @param lastName</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// some initial dummy data</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">street</span> <span class="o">=</span> <span class="s">&quot;some street&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">postalCode</span> <span class="o">=</span> <span class="mi">1234</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="s">&quot;some city&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFirstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getStreet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStreet</span><span class="o">(</span><span class="n">String</span> <span class="n">street</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">street</span> <span class="o">=</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPostalCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">postalCode</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPostalCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">postalCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">postalCode</span> <span class="o">=</span> <span class="n">postalCode</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCity</span><span class="o">(</span><span class="n">String</span> <span class="n">city</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Calendar</span> <span class="nf">getBirthday</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">Calendar</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A List of Persons</h2>

<p>The main Data that our application manages is a bunch of persons. Let&#8217;s create a list for <code>Person</code> objects inside the <code>MainApp</code> class. All other controller classes will later get access to the list inside the <code>MainApp</code>.</p>

<h3>ObservableList</h3>

<p>We are working with JavaFX view classes that always need to be informed about any changes made to the list of persons. This is important, since otherwise the view would not be in sync with the data. For this purpose, JavaFX introduces some new <a href="http://docs.oracle.com/javafx/2/collections/jfxpub-collections.htm">Collection classes</a>.</p>

<p>From those collections, we need the <code>ObservableList</code>. To create a new <code>ObservableList</code>, add the following code at the beginning of the <code>MainApp</code> class. We&#8217;ll also add a constructor that creates some sample data and a public getter method:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.FXCollections</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.collections.ObservableList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The data as an observable list of Persons.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personData</span> <span class="o">=</span> <span class="n">FXCollections</span><span class="o">.</span><span class="na">observableArrayList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Constructor</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MainApp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Add some sample data</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Hans&quot;</span><span class="o">,</span> <span class="s">&quot;Muster&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Ruth&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Heinz&quot;</span><span class="o">,</span> <span class="s">&quot;Kurz&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Cornelia&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Werner&quot;</span><span class="o">,</span> <span class="s">&quot;Meyer&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Lydia&quot;</span><span class="o">,</span> <span class="s">&quot;Kunz&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;Best&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Stefan&quot;</span><span class="o">,</span> <span class="s">&quot;Meier&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">personData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Martin&quot;</span><span class="o">,</span> <span class="s">&quot;Mueller&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Returns the data as an observable list of Persons. </span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ObservableList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">getPersonData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">personData</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The PersonOverviewController</h2>

<p>Now let&#8217;s finally view some data in our table.</p>

<ol>
<li>Create a normal class inside the controller package called <code>PersonOverviewController.java</code>.</li>
<li>We&#8217;ll add some instance variables that give us access to the table and the labels inside the view. The fields and some methods have a special <code>@FXML</code> annotation. This is necessary for the fxml file to have access to those variables. After we have everything set up in the fxml file, the application will automatically fill the variables when the fxml file is loaded. So let&#8217;s add the following code:</li>
</ol>


<p>Note: Remember to always use the javafx imports (not awt or swing)!</p>

<figure class='code'><figcaption><span>PersonOverviewController.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonOverviewController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableView</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personTable</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">firstNameColumn</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TableColumn</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lastNameColumn</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Label</span> <span class="n">firstNameLabel</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Label</span> <span class="n">lastNameLabel</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Label</span> <span class="n">streetLabel</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Label</span> <span class="n">postalCodeLabel</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Label</span> <span class="n">cityLabel</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Label</span> <span class="n">birthdayLabel</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Reference to the main application</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">MainApp</span> <span class="n">mainApp</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The constructor.</span>
</span><span class='line'><span class="cm">  * The constructor is called before the initialize() method.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">PersonOverviewController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Initializes the controller class. This method is automatically called</span>
</span><span class='line'><span class="cm">  * after the fxml file has been loaded.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@FXML</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Initialize the person table</span>
</span><span class='line'>      <span class="n">firstNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;firstName&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">lastNameColumn</span><span class="o">.</span><span class="na">setCellValueFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">PropertyValueFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;lastName&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Is called by the main application to give a reference back to itself.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param mainApp</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMainApp</span><span class="o">(</span><span class="n">MainApp</span> <span class="n">mainApp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mainApp</span> <span class="o">=</span> <span class="n">mainApp</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Add observable list data to the table</span>
</span><span class='line'>      <span class="n">personTable</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">mainApp</span><span class="o">.</span><span class="na">getPersonData</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this code will need some explanation:</p>

<ul>
<li>All fields and methods where the fxml file needs access must be annotated with <code>@FXML</code>. Actually, only if they are private, but it&#8217;s better to have them private and mark them with the annotation!.</li>
<li>The <code>initialize()</code> method is automatically called after the fxml file has been loaded. At this time, all the FXML fields should have been initialized already.</li>
<li>The <code>PropertyValueFactory</code> that we set on the table colums are used to determine which field inside the <code>Person</code> objects should be used for the particular column.</li>
<li>The <code>setMainApp(...)</code> method must be called by the <code>MainApp</code> class. This gives us a way to access the <code>MainApp</code> object and get the list of data and other things. In fact, let&#8217;s do that call right now. Replace the <code>showPersonOverview()</code> method with the following. It contains two additional lines:</li>
</ul>


<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Shows the person overview scene.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">showPersonOverview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Load the fxml file and set into the center of the main layout</span>
</span><span class='line'>      <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/PersonOverview.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">AnchorPane</span> <span class="n">overviewPage</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnchorPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>      <span class="n">rootLayout</span><span class="o">.</span><span class="na">setCenter</span><span class="o">(</span><span class="n">overviewPage</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Give the controller access to the main app</span>
</span><span class='line'>      <span class="n">PersonOverviewController</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">getController</span><span class="o">();</span>
</span><span class='line'>      <span class="n">controller</span><span class="o">.</span><span class="na">setMainApp</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hook the view to the Controller</h2>

<p>We&#8217;re almost there! But one little thing is missing: We haven&#8217;t told our <code>PersonOverview.fxml</code> file yet, which controller to use and which element should match to which field inside the controller.</p>

<ol>
<li>Open <code>PersonOverview.fxml</code> with the Scene Builder.</li>
<li>Select the topmost <em>AnchorPane</em> in the Hierarchy.</li>
<li><p>Open <em>Code</em> on the right side and select the <code>PersonOverviewController</code> as <strong>controller class</strong>. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-2/addressapp02.png"></p></li>
<li><p>Select the TableView and choose under Properties the <code>personTable</code> field as <strong>fx:id</strong>. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-2/addressapp03.png"></p></li>
<li><p>Do the same for the columns and select <code>firstNameColumn</code> and <code>lastNameColumn</code> respectively.</p></li>
<li>For each label in the second column, choose the corresponding <strong>fx:id</strong>.</li>
<li>Important: Go back to Eclipse and refresh the entire AddressApp project (F5). This is necessary because Eclipse sometimes doesn&#8217;t know about changes that were made inside the Scene Builder.</li>
</ol>


<h2>Start the Application</h2>

<p>When you start your application now, you should see something like the screenshot at the beginning of this blog post.</p>

<p>Congratulations!</p>

<hr />

<h3>What&#8217;s Next?</h3>

<p>In <a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Tutorial Part III</a> we will add more functionality like adding, deleting and editing Persons.</p>

<h3>Download</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-2/addressapp-part-2.zip">Source of Tutorial Part II</a> as Eclipse Project</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Tutorial Part I - Scene Builder]]></title>
    <link href="http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1/"/>
    <updated>2012-11-16T22:00:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/11/16/javafx-tutorial-addressapp-1</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp01.png"></p>

<h2>Goal</h2>

<p>The goal of this tutorial is to learn how to create graphical user interfaces with <strong>JavaFX 2</strong> and <strong>Scene Builder</strong>. We will cover many features of JavaFX 2 by creating an <strong>Address Application</strong> and enhancing it step-by-step.</p>

<h2>Topics in Part I</h2>

<ul>
<li>Getting to know JavaFX 2</li>
<li>Creating and starting a JavaFX Project</li>
<li>Using Scene Builder to design the user interface</li>
<li>Basic application structure using the Model View Controller (MVC) pattern</li>
</ul>


<!-- more -->


<h3>Other Tutorial Parts</h3>

<ul>
<li><strong>Part I - Scene Builder</strong></li>
<li><a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Part II - Model and TableView</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/20/javafx-tutorial-addressapp-3">Part III - Interacting with the User</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/26/javafx-tutorial-addressapp-4">Part IV - CSS Styling</a></li>
<li><a href="http://edu.makery.ch/blog/2012/11/27/javafx-tutorial-addressapp-5">Part V - Storing Data as XML</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/04/javafx-tutorial-addressapp-6">Part VI - Statistics Chart</a></li>
<li><a href="http://edu.makery.ch/blog/2012/12/18/javafx-tutorial-addressapp-7">Part VII - Deployment with e(fx)clipse</a></li>
</ul>


<h3>Prerequisites</h3>

<ul>
<li>Latest <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java JDK 7</a> that includes <strong>JavaFX 2.2</strong> or greater.</li>
<li>Eclipse 4.2 or greater with e(fx)clipse plugin. The easiest way is to download the preconfigured distro from the <a href="http://efxclipse.org/install.html">e(fx)clipse website</a>.</li>
<li><a href="http://www.oracle.com/technetwork/java/javafx/overview/index.html">Scene Builder 1.1</a> or greater</li>
</ul>


<h3>Preparation and Helpful Links</h3>

<p>Play around with the JavaFX widgets in the <a href="http://download.oracle.com/otndocs/products/javafx/2.2/samples/Ensemble/index.html#SAMPLES">JavaFX Ensemble</a>:</p>

<ul>
<li>JavaFX Ensemble is a gallery of over 100 sample applications that use a wide range of JavaFX features.</li>
<li>Contains source code for each sample.</li>
<li>Contains links to API documentation (JavaDoc).</li>
</ul>


<p>Some other helpful links:</p>

<ul>
<li><a href="http://docs.oracle.com/javafx/2/get_started/jfxpub-get_started.htm">JavaFX Tutorials</a> - Official Tutorials by Oracle</li>
<li><a href="http://docs.oracle.com/javafx/2/api/">JavaFX 2 API</a> - JavaDoc for JavaFX classes</li>
<li><a href="http://docs.oracle.com/javase/7/docs/api/">Java 7 API</a> - JavaDoc for the standard Java classes</li>
</ul>


<p>Now, let&#8217;s get started!</p>

<h2>Create a new JavaFX Project</h2>

<p>In Eclipse (with e(fx)clipse installed) go to <em>File | New | Other&#8230;</em> and choose <em>JavaFX Project</em>.
Specify the Name of the project (i.e. AddressApp).</p>

<h3>Create the Packages</h3>

<p>Right from the start we will follow good software design principles. One very important principle is that of <a href="http://de.wikipedia.org/wiki/Model_View_Controller"><strong>Model-View-Controller</strong> (MVC)</a>. According to this we divide our code into three units and create a package for each (Right-click on the src-folder, <em>New&#8230; | Package</em>):</p>

<ul>
<li>For the controller classes: <code>ch.makery.address</code></li>
<li>For the view classes: <code>ch.makery.address.view</code></li>
<li>For the model classes: <code>ch.makery.address.model</code></li>
</ul>


<h2>Create the FXML Layout File</h2>

<p>There are two ways to create the user interface. Either using an XML file or programming everything in Java. Looking around the internet you will encounter both. We will use XML (ending in .fxml) for most parts. I find it a cleaner way to keep the controller and model separated from each other. Further, we can use the graphical Scene Builder to edit the XML. That means we will almost never have to directly work with XML.</p>

<p>Right-click on the view package and create a new <em>FXML Document</em> called <code>PersonOverview</code>. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp03.png" width="400">
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp04.png" width="400"></p>

<h2>Design with Scene Builder</h2>

<p><strong>Note:</strong> If you get stuck somewhere, watch the <a href="http://www.youtube.com/watch?v=rHcnsEoSK_c">Getting Started with JavaFX Scene Builder</a> YouTube Film. This helps a lot!</p>

<p>Right-click on <code>PersonOverview.fxml</code> and choose <em>Open with Scene Builder</em>. Now you should see the Scene Builder with just an <em>AncherPane</em> (visible under Hierarchy on the left).</p>

<ol>
<li><p>Select the <em>Anchor Pane</em> in your Hierarchy and adjust the size under Layout (right side): <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp05.png"></p></li>
<li><p>Add a <em>Split Pane (Horizontal Flow)</em> by dragging it from the Library into the main area. Right-click and select <em>Fit to Parent</em>. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp06.png"></p></li>
<li><p>Add a <em>TableView</em> into the left side. Select the TableView (not a Column) and set the following layout constraints. Inside an <em>AnchorPane</em> you can always set anchors to the four borders (<a href="http://docs.oracle.com/javafx/2/layout/builtin_layouts.htm">more information on Layouts</a>). <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp07.png"></p></li>
<li><p>Go to the menu <em>Preview | Preview in Window</em> to see, whether it behaves right. Try resizing the window. The TableView should always keep the 10px distance to the surrounding border.</p></li>
<li><p>Change the column text (under Properties) to &#8220;First Name&#8221; and &#8220;Last Name&#8221; and adjust the sizes. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp08.png"></p></li>
<li><p>Add a <em>Label</em> on the right side with the text &#8220;Person Details&#8221;. Adjust it&#8217;s Layout using anchors.</p></li>
<li><p>Add a <em>GridPane</em> on the right side, select it and adjust it&#8217;s Layout.  <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp09.png"></p></li>
<li><p>Add some rows (under <em>Layout | GridPane Rows</em>). Add labels to the cells. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp10.png"></p></li>
<li><p>Add the three buttons at the bottom. Tipp: Select all of them, right-click and call <em>Wrap In | HBox</em>. This groups them together. You might need to specify a Spacing inside the HBox.</p></li>
<li><p>Now you should see something like the following. Please test it using the Preview Menu.    <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp11.png"></p></li>
</ol>


<h2>Creating the Main Application</h2>

<p>We need another FXML for our root layout which will contain a menu bar and wraps the just created <code>PersonOverview.fxml?</code>.</p>

<ol>
<li><p>Create another <em>FXML Document</em> inside the view package called <code>RootLayout.fxml</code>. This time, choose <em>BorderPane</em> as the root element. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp12.png"></p></li>
<li><p>Open it in the Scene Builder.</p></li>
<li><p>Resize the <em>BorderPane</em> with <em>Pref Width</em> set to 600 and <em>Pref Height</em> set to 400. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp13.png"></p></li>
<li><p>Add a <em>MenuBar</em> into the TOP Slot. We will not implement the menu functionality at the moment. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp14.png"></p></li>
<li><p>Now, we need to create the Main Java that starts up our application with the <code>RootLayout.fxml</code> and adds the <code>PersonOverview.fxml</code> in the center.</p></li>
<li><p>Right-click on the controller package, <em>New | Other&#8230;</em> and choose <em>JavaFX Main Class</em>. We&#8217;ll call it <code>MainApp</code>. <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/addressapp15.png" width="400"></p></li>
</ol>


<h3>Understanding the JavaFX Main class</h3>

<p>The generated <code>MainApp.java</code> class extends from <code>Application</code> and contains two methods. This is the basic structure that we need to start a JavaFX Application. The most important part for us is the <code>start(Stage primaryStage)</code> method. It is automatically called when we run the application.</p>

<p>As you see, the <code>start(...)</code> method receives a <code>Stage</code> as parameter. It&#8217;s good to understand the basic concept of a graphical application with JavaFX: <br/>
<img src="http://edu.makery.ch/images/javafx-addressapp/part-1/javafx-hierachy.gif"> <br/>
<em>Image Source: http://www.oracle.com/</em></p>

<p>It&#8217;s like a theater play: The Stage is the main container which is usually a Window with a border and the typical minimize, maximize and close buttons. Inside the Stage you add a Scene which can, of course, be switched out by another Scene. Inside the Scene the actual JavaFX nodes like AnchorPane, TextBox, etc. are added.</p>

<p>Open <code>MainApp.java</code> and replace the code with the following:</p>

<figure class='code'><figcaption><span>MainApp.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">ch</span><span class="o">.</span><span class="na">makery</span><span class="o">.</span><span class="na">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.fxml.FXMLLoader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.Scene</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.layout.AnchorPane</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.scene.layout.BorderPane</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainApp</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">BorderPane</span> <span class="n">rootLayout</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span> <span class="o">=</span> <span class="n">primaryStage</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;AddressApp&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Load the root layout from the fxml file</span>
</span><span class='line'>          <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/RootLayout.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>          <span class="n">rootLayout</span> <span class="o">=</span> <span class="o">(</span><span class="n">BorderPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>          <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">rootLayout</span><span class="o">);</span>
</span><span class='line'>          <span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
</span><span class='line'>          <span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">showPersonOverview</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Returns the main stage.</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Stage</span> <span class="nf">getPrimaryStage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">primaryStage</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Shows the person overview scene.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showPersonOverview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Load the fxml file and set into the center of the main layout</span>
</span><span class='line'>          <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">(</span><span class="n">MainApp</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;view/PersonOverview.fxml&quot;</span><span class="o">));</span>
</span><span class='line'>          <span class="n">AnchorPane</span> <span class="n">overviewPage</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnchorPane</span><span class="o">)</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>
</span><span class='line'>          <span class="n">rootLayout</span><span class="o">.</span><span class="na">setCenter</span><span class="o">(</span><span class="n">overviewPage</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Exception gets thrown if the fxml file could not be loaded</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try to understand the code. The various comments should give you some hints about what&#8217;s going on.</p>

<p>If you run the application now, you should see something like the screenshot at the beginning of this post.</p>

<hr />

<h3>What&#8217;s Next?</h3>

<p>In <a href="http://edu.makery.ch/blog/2012/11/17/javafx-tutorial-addressapp-2">Tutorial Part II</a> we will add some data and functionality to our AddressApp.</p>

<h3>Download</h3>

<p><a href="http://edu.makery.ch/downloads/javafx-addressapp/part-1/addressapp-part-1.zip">Source of Tutorial Part I</a> as Eclipse Project</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFX 2 Dialogs]]></title>
    <link href="http://edu.makery.ch/blog/2012/10/30/javafx-2-dialogs/"/>
    <updated>2012-10-30T00:45:00+01:00</updated>
    <id>http://edu.makery.ch/blog/2012/10/30/javafx-2-dialogs</id>
    <content type="html"><![CDATA[<p>When programming a graphical user interface (GUI) there are occasions where you&#8217;ll need a simple popup dialog to communicate with the user. In Swing (the predecessor of JavaFX) there is a convenient class called <a href="http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html">JOptionPane</a> for such dialogs. A similar class doesn&#8217;t exist in JavaFX 2.x (yet).</p>

<p>Fortunately, the authors of JavaFX <a href="http://fxexperience.com/2012/10/announcing-the-javafx-ui-controls-sandbox/">published</a> some user interface controls they are currently working on. Those controls might be added in a future version of JavaFX.</p>

<p>One of those ui controls is a class called <code>Dialogs.java</code> which is exactly what we need.</p>

<h2>How To Use the Dialogs</h2>

<ol>
<li>Download the newest <strong>javafx-dialogs-x.x.x.jar</strong> file from my <a href="https://github.com/marcojakob/javafx-ui-sandbox/tree/master/javafx-dialogs/dist">GitHub Page</a>. I put all necessary classes, css files and images inside this jar.</li>
<li>Add the jar file to your project (usually inside a <strong>lib</strong> subfolder).</li>
<li>Add the jar file to the project&#8217;s classpath: In Eclipse <em>right-click on the jar file</em> | <em>Build Path</em> | <em>Add to Build Path</em>. Now Eclipse knows about the library.</li>
<li>Then add one of the following lines:</li>
</ol>


<h3>Information Dialog</h3>

<p><img src="http://edu.makery.ch/images/javafx-dialogs/javafx-information-dialog.png" title="JavaFX Information Dialog" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">Dialogs</span><span class="o">.</span><span class="na">showInformationDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;I have a great message for you!&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Information Dialog&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>Warning Dialog</h3>

<p><img src="http://edu.makery.ch/images/javafx-dialogs/javafx-warning-dialog.png" title="JavaFX Warning Dialog" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">Dialogs</span><span class="o">.</span><span class="na">showWarningDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;Careful with the next step!&quot;</span><span class="o">,</span> <span class="s">&quot;Warning Dialog&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Error Dialog</h3>

<p><img src="http://edu.makery.ch/images/javafx-dialogs/javafx-error-dialog.png" title="JavaFX Error Dialog" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;Ooops, there was an error!&quot;</span><span class="o">,</span> <span class="s">&quot;Error Dialog&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may also provide an exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">Dialogs</span><span class="o">.</span><span class="na">showErrorDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;Ooops, there was an error!&quot;</span><span class="o">,</span> <span class="s">&quot;Error Dialog With Exception&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileNotFoundException</span><span class="o">(</span><span class="s">&quot;Could not find file blabla.txt&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Confirm Dialog</h3>

<p><img src="http://edu.makery.ch/images/javafx-dialogs/javafx-confirmation-dialog.png" title="JavaFX Confirm Dialog" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">DialogResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Dialogs</span><span class="o">.</span><span class="na">showConfirmDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Do you want to continue?&quot;</span><span class="o">,</span> <span class="s">&quot;Confirm Dialog&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may provide <code>DialogOptions</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">DialogResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Dialogs</span><span class="o">.</span><span class="na">showConfirmDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;Are you ok with this?&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;Confirm Dialog With Options&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">DialogOptions</span><span class="o">.</span><span class="na">OK_CANCEL</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The response will either be <code>DialogResponse.YES</code>, <code>DialogResponse.NO</code>, <code>DialogResponse.CANCEL</code>, <code>DialogResponse.OK</code>, or <code>DialogResponse.CLOSED</code>.</p>

<h3>Input Dialog</h3>

<p><img src="http://edu.makery.ch/images/javafx-dialogs/javafx-input-dialog.png" title="JavaFX Input Dialog" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">Dialogs</span><span class="o">.</span><span class="na">showInputDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;Please enter your name:&quot;</span><span class="o">,</span> <span class="s">&quot;Input Dialog&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you provide some choices, a combobox will be displayed:
<img src="http://edu.makery.ch/images/javafx-dialogs/javafx-input-dialog-choices.png" title="JavaFX Input Dialog with Choices" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">choices</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">choices</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">choices</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">choices</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'><span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">Dialogs</span><span class="o">.</span><span class="na">showInputDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="s">&quot;Choose your color:&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Input Dialog With Choices&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="n">choices</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>UPDATE (Version 0.0.3)</strong></p>

<h3>Custom Dialog</h3>

<p>Since JavaFX dialogs version 0.0.3 there is support for custom dialogs (thanks to Guldner for providing the <a href="https://github.com/marcojakob/javafx-ui-sandbox/pull/7">patch</a>).</p>

<p>Here is an example of how to use custom dialogs to create a login form:</p>

<p><img src="http://edu.makery.ch/images/javafx-dialogs/javafx-custom-dialog.png" title="JavaFX Custom Dialog" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="n">GridPane</span> <span class="n">grid</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GridPane</span><span class="o">();</span>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">setHgap</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">setVgap</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
</span><span class='line'><span class="kd">final</span> <span class="n">TextField</span> <span class="n">username</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextField</span><span class="o">();</span>
</span><span class='line'><span class="n">username</span><span class="o">.</span><span class="na">setPromptText</span><span class="o">(</span><span class="s">&quot;Username&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">PasswordField</span> <span class="n">password</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PasswordField</span><span class="o">();</span>
</span><span class='line'><span class="n">password</span><span class="o">.</span><span class="na">setPromptText</span><span class="o">(</span><span class="s">&quot;Password&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Label</span><span class="o">(</span><span class="s">&quot;Username:&quot;</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Label</span><span class="o">(</span><span class="s">&quot;Password:&quot;</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">grid</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">usernameResult</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">passwordResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Callback</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;</span> <span class="n">myCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Void</span> <span class="nf">call</span><span class="o">(</span><span class="n">Void</span> <span class="n">param</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">usernameResult</span> <span class="o">=</span> <span class="n">username</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>    <span class="n">passwordResult</span> <span class="o">=</span> <span class="n">password</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">DialogResponse</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">Dialogs</span><span class="o">.</span><span class="na">showCustomDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span> <span class="n">grid</span><span class="o">,</span> <span class="s">&quot;Please log in&quot;</span><span class="o">,</span> <span class="s">&quot;Login&quot;</span><span class="o">,</span> <span class="n">DialogOptions</span><span class="o">.</span><span class="na">OK_CANCEL</span><span class="o">,</span> <span class="n">myCallback</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Custom Dialog: User clicked: &quot;</span> <span class="o">+</span> <span class="n">resp</span><span class="o">);</span>
</span><span class='line'><span class="c1">//You must check the resp, since input fields&#39; texts are returned regardless of what button was pressed. (ie. If user clicked &#39;Cancel&#39; disregard the input) </span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Custom Dialog: Fields set from custom dialog: &quot;</span> <span class="o">+</span> <span class="n">usernameResult</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">passwordResult</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bugs / Questions</h2>

<p>If you have questions or found a bug please leave a comment below or report an <a href="https://github.com/marcojakob/javafx-ui-sandbox">issue on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GameGridKara 2.0 Released]]></title>
    <link href="http://edu.makery.ch/blog/2012/10/03/gamegridkara-2-0-released/"/>
    <updated>2012-10-03T13:00:00+02:00</updated>
    <id>http://edu.makery.ch/blog/2012/10/03/gamegridkara-2-0-released</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/kara/gamegridkara-logo-large.png" title="GameGridKara" ></p>

<p>GameGridKara version 2.0 has been released (see a <a href="http://www.swisseduc.ch/informatik/karatojava/gamegridkara/changes.html">change log</a>).</p>

<h2>Features</h2>

<ul>
<li>Complete beginners course in German and English</li>
<li>Combination of Kara and <a href="http://www.gamegrid.ch">GameGrid</a> for a simple introduction to Java programming</li>
<li>Use <strong>any programming IDE like Eclipse, Netbeans or BlueJ</strong></li>
<li>16-20 lessons</li>
<li>12 handouts for students</li>
<li>24 Kara scenarios</li>
<li>38+ exercises with solutions</li>
<li>Programming of a Sokoban game with self-designed levels, a highscore, etc.</li>
</ul>


<h2>Sample Scenario</h2>

<p>That&#8217;s how a simple scenario of GameGridKara looks like in Eclipse. You will find the complete exercise on the handout for chapter 1 (see downloads).</p>

<p><img src="http://edu.makery.ch/images/kara/gamegridkara-eclipse.png" title="GameGridKara in Eclipse" ></p>

<p>What does the program in the screenshot do? It will get Kara around the first tree. The complete program can be written inside the <code>act()</code> method. For more complex scenarios you will likely have to create additional methods.</p>

<!-- more -->


<p>Kara&#8217;s world in the scenario above is loaded from the WorldSetup.txt file:</p>

<figure class='code'><figcaption><span>WorldSetup.txt</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='text'><span class='line'>World: Kara 07 Around Tree
</span><span class='line'>X: 10
</span><span class='line'>Y: 2
</span><span class='line'>
</span><span class='line'>@ # #  #.
</span></code></pre></td></tr></table></div></figure>


<p><code>X</code> and <code>Y</code> attributes define the width and height of the world. <code>@</code> represents the location of Kara while <code>#</code> stands for a tree and <code>.</code> for a leaf. The size of the world and the actor positions can easily be changed by editing the <em>WorldSetup.txt</em> file. You can also design new world setups by placing actors inside the world with the mouse and using the context menu | <code>saveWorldSetupToFile()</code> to save it to a file.</p>

<h2>How to Get Started</h2>

<p>To use the predefined scenarios you can import the scenarios into your development environment (see downloads below).</p>

<h3>Create Your Own Scenarios</h3>

<p>To create your own scenarios you will need to put the following two libraries on the classpath:</p>

<ul>
<li>GameGridKara-2.2.0.jar</li>
<li>JGameGrid-2.20.jar</li>
</ul>


<p>You can extract the two libraries from any scenario (see downloads below).</p>

<p>Each scenario must have <em>one Java class</em> and a <em>WorldSetup.txt</em> file as seen above. Here is a complete example of a Java class where the actual program will be written:</p>

<figure class='code'><figcaption><span>MyKara.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">kara.gamegrid.Kara</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kara.gamegrid.KaraWorld</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MyKara is a subclass of Kara. Therefore, it inherits all methods of Kara: &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * &lt;i&gt;MyKara ist eine Unterklasse von Kara. Sie erbt damit alle Methoden der Klasse Kara:&lt;/i&gt; &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Actions:     move(), turnLeft(), turnRight(), putLeaf(), removeLeaf() &lt;b&gt;</span>
</span><span class='line'><span class="cm"> * Sensors:     onLeaf(), treeFront(), treeLeft(), treeRight(), mushroomFront()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyKara</span> <span class="kd">extends</span> <span class="n">Kara</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * In the &#39;act()&#39; method you can write your program for Kara &lt;br&gt;</span>
</span><span class='line'><span class="cm">   * &lt;i&gt;In der Methode &#39;act()&#39; koennen die Befehle fuer Kara programmiert werden&lt;/i&gt;</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">act</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      <span class="n">turnRight</span><span class="o">();</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The main-method is the start of the program where the Kara world is loaded &lt;br&gt;</span>
</span><span class='line'><span class="cm">  * &lt;i&gt;Die main-Methode ist der Start des Programms, wo die Kara Welt geladen wird&lt;/i&gt;</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">KaraWorld</span> <span class="n">world</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KaraWorld</span><span class="o">(</span><span class="s">&quot;WorldSetup.txt&quot;</span><span class="o">,</span> <span class="n">MyKara</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">world</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>main(...)</code> method is needed to setup and start the world. You need to tell GameGridKara the name of the world setup file and provide the class in which to look for the <code>act()</code> method.</p>

<h2>GameGridKara Downloads</h2>

<p>Instructions, handouts, and scenarios can be downloaded from the Swisseduc website: <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/gamegridkara/gamegridkara-english.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GameGridKara on Swisseduc (English)'" > GameGridKara Downloads (English)</a> <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/gamegridkara/index.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GameGridKara on Swisseduc (German)'" > GameGridKara Downloads (German)</a></p>

<p>The GameGridKara source can be found on GitHub (feedback and bug reports are welcome!): <br/>
<a href="https://github.com/marcojakob/gamegrid-kara"><img class="nobox middle" src="http://edu.makery.ch/images/glyphicons_github.png" title="'GameGridKara on GitHub'" > GameGridKara Source on GitHub</a></p>

<h2>Feedback</h2>

<p>I would appreciate any feedback of your experience with GameGridKara. You can write an <a href="http://edu.makery.ch/about">E-Mail</a> or leave a comment at the bottom of this blog entry. If you create your own exercises and scenarios I would be glad to post or link them on this blog so others could use them too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GreenfootKara 2.0 Released]]></title>
    <link href="http://edu.makery.ch/blog/2012/10/03/greenfootkara-2-0-released/"/>
    <updated>2012-10-03T12:00:00+02:00</updated>
    <id>http://edu.makery.ch/blog/2012/10/03/greenfootkara-2-0-released</id>
    <content type="html"><![CDATA[<p><img src="http://edu.makery.ch/images/kara/greenfootkara-logo-large.png" title="'GreenfootKara'" ></p>

<p>GreenfootKara version 2.0 has been released (see a <a href="http://www.swisseduc.ch/informatik/karatojava/greenfootkara/changes.html">change log</a>).</p>

<h2>Features</h2>

<ul>
<li>Complete beginners course in German and English</li>
<li>Combination of Kara and <a href="http://greenfoot.org">Greenfoot</a> for a simple introduction to Java programming</li>
<li><strong>Uses Greenfoot as a simple programming IDE</strong></li>
<li>16-20 lessons</li>
<li>12 handouts for students</li>
<li>24 Kara scenarios</li>
<li>38+ exercises with solutions</li>
<li>Programming of a Sokoban game with self-designed levels, a highscore, etc.</li>
</ul>


<h2>Sample Scenario</h2>

<p>That&#8217;s how a simple scenario of GreenfootKara looks like. You will find the complete exercise on the handout for chapter 1 (see downloads).</p>

<p><img src="http://edu.makery.ch/images/kara/greenfootkara-screenshot.png" title="GreenfootKara in Eclipse" ></p>

<p>What does the program in the screenshot do? It will get Kara around the first tree. The complete program can be written inside the <code>act()</code> method. For more complex scenarios you will likely have to create additional methods.</p>

<!-- more -->


<p>Kara&#8217;s world in the scenario above is loaded from the WorldSetup.txt file:</p>

<figure class='code'><figcaption><span>WorldSetup.txt</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='text'><span class='line'>World: Kara 07 Around Tree
</span><span class='line'>X: 10
</span><span class='line'>Y: 10
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@ # #  #.
</span></code></pre></td></tr></table></div></figure>


<p><code>X</code> and <code>Y</code> attributes define the width and height of the world. <code>@</code> represents the location of Kara while <code>#</code> stands for a tree and <code>.</code> for a leaf. The size of the world and the actor positions can easily be changed by editing the <em>WorldSetup.txt</em> file. You can also design new world setups by placing actors inside the world with the mouse and using the context menu | <code>saveWorldSetupToFile()</code> to save it to a file.</p>

<h2>How to Get Started</h2>

<p>First you must download and install <a href="http://greenfoot.org">Greenfoot</a>. After the installation you should be able to open and compile the predefined scenarios (see downloads below).</p>

<h3>Create Your Own Scenarios</h3>

<p>To create your own scenarios I recommend to just copy an existing scenario and make changes to the <em>WorldSetup.txt</em> file and the <em>MyKara</em> class.</p>

<p>Here is an example of a complete MyKara class:</p>

<figure class='code'><figcaption><span>MyKara.java</span></figcaption><div class="highlight"><table><tr> <td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MyKara is a subclass of Kara. Therefore, it inherits all methods of Kara: &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * &lt;i&gt;MyKara ist eine Unterklasse von Kara. Sie erbt damit alle Methoden der Klasse Kara:&lt;/i&gt; &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Actions:     move(), turnLeft(), turnRight(), putLeaf(), removeLeaf() &lt;b&gt;</span>
</span><span class='line'><span class="cm"> * Sensors:     onLeaf(), treeFront(), treeLeft(), treeRight(), mushroomFront()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyKara</span> <span class="kd">extends</span> <span class="n">Kara</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * In the &#39;act()&#39; method you can write your program for Kara &lt;br&gt;</span>
</span><span class='line'><span class="cm">     * &lt;i&gt;In der Methode &#39;act()&#39; koennen die Befehle fuer Kara programmiert werden&lt;/i&gt;</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">act</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      <span class="n">turnRight</span><span class="o">();</span>
</span><span class='line'>      <span class="n">move</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To change the name of the world setup file that is used to build the world: Change the String constant <code>WORLD_SETUP_FILE</code> inside the <em>KaraWorld</em> class.</p>

<h2>GreenfootKara Downloads</h2>

<p>Instructions, handouts, and scenarios can be downloaded from the Swisseduc website: <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/greenfootkara/greenfootkara-english.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GreenfootKara on Swisseduc (English)'" > GreenfootKara Downloads (English)</a> <br/>
<a href="http://www.swisseduc.ch/informatik/karatojava/greenfootkara/index.html"><img class="nobox middle" src="http://edu.makery.ch/images/swisseduc.png" title="'GreenfootKara on Swisseduc (German)'" > GreenfootKara Downloads (German)</a></p>

<p>The GreenfootKara source can be found on GitHub (feedback and bug reports are welcome!): <br/>
<a href="https://github.com/marcojakob/greenfoot-kara"><img class="nobox middle" src="http://edu.makery.ch/images/glyphicons_github.png" title="'GreenfootKara on GitHub'" > GreenfootKara Source on GitHub</a></p>

<h2>Feedback</h2>

<p>I would appreciate any feedback of your experience with GreenfootKara. You can write an <a href="http://edu.makery.ch/about">E-Mail</a> or leave a comment at the bottom of this blog entry. If you create your own exercises and scenarios I would be glad to post or link them on this blog so others could use them too.</p>
]]></content>
  </entry>
  
</feed>
